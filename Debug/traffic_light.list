
traffic_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003008  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003114  08003114  00013114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003138  08003138  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08003138  08003138  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003138  08003138  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003138  08003138  00013138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800313c  0800313c  0001313c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08003140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000040  08003180  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08003180  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009244  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001afe  00000000  00000000  000292ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002adb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002b800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c4e  00000000  00000000  0002c168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba49  00000000  00000000  00042db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008244e  00000000  00000000  0004e7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0c4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a54  00000000  00000000  000d0ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	080030fc 	.word	0x080030fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	080030fc 	.word	0x080030fc

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <fsm_traffic_light>:
	INCREASE_BY_1,INCREASE_BY_1_OVER_TIME, NOT_CHANGE
} prestatus=NOT_CHANGE;
void button0(void);
void button1(void);
void button2(void);
void fsm_traffic_light(void){
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	number_set(traffic_light_time1, traffic_light_time2);
 800093c:	4b40      	ldr	r3, [pc, #256]	; (8000a40 <fsm_traffic_light+0x108>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a40      	ldr	r2, [pc, #256]	; (8000a44 <fsm_traffic_light+0x10c>)
 8000942:	6812      	ldr	r2, [r2, #0]
 8000944:	4611      	mov	r1, r2
 8000946:	4618      	mov	r0, r3
 8000948:	f000 ff54 	bl	80017f4 <number_set>
	if (traffic_light_time1 <= 0) {
 800094c:	4b3c      	ldr	r3, [pc, #240]	; (8000a40 <fsm_traffic_light+0x108>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	dc34      	bgt.n	80009be <fsm_traffic_light+0x86>
		switch (traffic_light[0]) {
 8000954:	4b3c      	ldr	r3, [pc, #240]	; (8000a48 <fsm_traffic_light+0x110>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b02      	cmp	r3, #2
 800095a:	d014      	beq.n	8000986 <fsm_traffic_light+0x4e>
 800095c:	2b02      	cmp	r3, #2
 800095e:	dc30      	bgt.n	80009c2 <fsm_traffic_light+0x8a>
 8000960:	2b00      	cmp	r3, #0
 8000962:	d002      	beq.n	800096a <fsm_traffic_light+0x32>
 8000964:	2b01      	cmp	r3, #1
 8000966:	d01c      	beq.n	80009a2 <fsm_traffic_light+0x6a>
			traffic_light[0] = RED;
			traffic_light_time1 = red;
			control_traffic_light(0, 1, 0, 0);
			break;
		default:
			break;
 8000968:	e02b      	b.n	80009c2 <fsm_traffic_light+0x8a>
			traffic_light[0] = GREEN;
 800096a:	4b37      	ldr	r3, [pc, #220]	; (8000a48 <fsm_traffic_light+0x110>)
 800096c:	2202      	movs	r2, #2
 800096e:	701a      	strb	r2, [r3, #0]
			traffic_light_time1 = green;
 8000970:	4b36      	ldr	r3, [pc, #216]	; (8000a4c <fsm_traffic_light+0x114>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a32      	ldr	r2, [pc, #200]	; (8000a40 <fsm_traffic_light+0x108>)
 8000976:	6013      	str	r3, [r2, #0]
			control_traffic_light(0, 0, 0, 1);
 8000978:	2301      	movs	r3, #1
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	2000      	movs	r0, #0
 8000980:	f000 fee6 	bl	8001750 <control_traffic_light>
			break;
 8000984:	e01e      	b.n	80009c4 <fsm_traffic_light+0x8c>
			traffic_light[0] = YELLOW;
 8000986:	4b30      	ldr	r3, [pc, #192]	; (8000a48 <fsm_traffic_light+0x110>)
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
			traffic_light_time1 = yellow;
 800098c:	4b30      	ldr	r3, [pc, #192]	; (8000a50 <fsm_traffic_light+0x118>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a2b      	ldr	r2, [pc, #172]	; (8000a40 <fsm_traffic_light+0x108>)
 8000992:	6013      	str	r3, [r2, #0]
			control_traffic_light(0, 0, 1, 0);
 8000994:	2300      	movs	r3, #0
 8000996:	2201      	movs	r2, #1
 8000998:	2100      	movs	r1, #0
 800099a:	2000      	movs	r0, #0
 800099c:	f000 fed8 	bl	8001750 <control_traffic_light>
			break;
 80009a0:	e010      	b.n	80009c4 <fsm_traffic_light+0x8c>
			traffic_light[0] = RED;
 80009a2:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <fsm_traffic_light+0x110>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
			traffic_light_time1 = red;
 80009a8:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <fsm_traffic_light+0x11c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a24      	ldr	r2, [pc, #144]	; (8000a40 <fsm_traffic_light+0x108>)
 80009ae:	6013      	str	r3, [r2, #0]
			control_traffic_light(0, 1, 0, 0);
 80009b0:	2300      	movs	r3, #0
 80009b2:	2200      	movs	r2, #0
 80009b4:	2101      	movs	r1, #1
 80009b6:	2000      	movs	r0, #0
 80009b8:	f000 feca 	bl	8001750 <control_traffic_light>
			break;
 80009bc:	e002      	b.n	80009c4 <fsm_traffic_light+0x8c>
		}
	}
 80009be:	bf00      	nop
 80009c0:	e000      	b.n	80009c4 <fsm_traffic_light+0x8c>
			break;
 80009c2:	bf00      	nop
	if (traffic_light_time2 <= 0) {
 80009c4:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <fsm_traffic_light+0x10c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	dc34      	bgt.n	8000a36 <fsm_traffic_light+0xfe>
		switch (traffic_light[1]) {
 80009cc:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <fsm_traffic_light+0x110>)
 80009ce:	785b      	ldrb	r3, [r3, #1]
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d014      	beq.n	80009fe <fsm_traffic_light+0xc6>
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	dc30      	bgt.n	8000a3a <fsm_traffic_light+0x102>
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d002      	beq.n	80009e2 <fsm_traffic_light+0xaa>
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d01c      	beq.n	8000a1a <fsm_traffic_light+0xe2>
			traffic_light[1] = RED;
			traffic_light_time2 = red;
			control_traffic_light(1, 1, 0, 0);
			break;
		default:
			break;
 80009e0:	e02b      	b.n	8000a3a <fsm_traffic_light+0x102>
			traffic_light[1] = GREEN;
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <fsm_traffic_light+0x110>)
 80009e4:	2202      	movs	r2, #2
 80009e6:	705a      	strb	r2, [r3, #1]
			traffic_light_time2 = green;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <fsm_traffic_light+0x114>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <fsm_traffic_light+0x10c>)
 80009ee:	6013      	str	r3, [r2, #0]
			control_traffic_light(1, 0, 0, 1);
 80009f0:	2301      	movs	r3, #1
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	2001      	movs	r0, #1
 80009f8:	f000 feaa 	bl	8001750 <control_traffic_light>
			break;
 80009fc:	e01e      	b.n	8000a3c <fsm_traffic_light+0x104>
			traffic_light[1] = YELLOW;
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <fsm_traffic_light+0x110>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	705a      	strb	r2, [r3, #1]
			traffic_light_time2 = yellow;
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <fsm_traffic_light+0x118>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <fsm_traffic_light+0x10c>)
 8000a0a:	6013      	str	r3, [r2, #0]
			control_traffic_light(1, 0, 1, 0);
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2100      	movs	r1, #0
 8000a12:	2001      	movs	r0, #1
 8000a14:	f000 fe9c 	bl	8001750 <control_traffic_light>
			break;
 8000a18:	e010      	b.n	8000a3c <fsm_traffic_light+0x104>
			traffic_light[1] = RED;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <fsm_traffic_light+0x110>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	705a      	strb	r2, [r3, #1]
			traffic_light_time2 = red;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <fsm_traffic_light+0x11c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <fsm_traffic_light+0x10c>)
 8000a26:	6013      	str	r3, [r2, #0]
			control_traffic_light(1, 1, 0, 0);
 8000a28:	2300      	movs	r3, #0
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f000 fe8e 	bl	8001750 <control_traffic_light>
			break;
 8000a34:	e002      	b.n	8000a3c <fsm_traffic_light+0x104>
		}
	}
 8000a36:	bf00      	nop
 8000a38:	e000      	b.n	8000a3c <fsm_traffic_light+0x104>
			break;
 8000a3a:	bf00      	nop

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000024 	.word	0x20000024
 8000a44:	20000028 	.word	0x20000028
 8000a48:	2000002c 	.word	0x2000002c
 8000a4c:	20000020 	.word	0x20000020
 8000a50:	2000001c 	.word	0x2000001c
 8000a54:	20000018 	.word	0x20000018

08000a58 <traffic_light_adjustment>:
void traffic_light_adjustment(void){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	switch(status){
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <traffic_light_adjustment+0x70>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b03      	cmp	r3, #3
 8000a62:	d020      	beq.n	8000aa6 <traffic_light_adjustment+0x4e>
 8000a64:	2b03      	cmp	r3, #3
 8000a66:	dc2b      	bgt.n	8000ac0 <traffic_light_adjustment+0x68>
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d002      	beq.n	8000a72 <traffic_light_adjustment+0x1a>
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d00d      	beq.n	8000a8c <traffic_light_adjustment+0x34>
	case 3: //GREEN adjustment
		control_traffic_light(0, 0, 0, 1);
		control_traffic_light(1, 0, 0, 1);
		break;
	default:
		break;
 8000a70:	e026      	b.n	8000ac0 <traffic_light_adjustment+0x68>
		control_traffic_light(0, 1, 0, 0);
 8000a72:	2300      	movs	r3, #0
 8000a74:	2200      	movs	r2, #0
 8000a76:	2101      	movs	r1, #1
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f000 fe69 	bl	8001750 <control_traffic_light>
		control_traffic_light(1, 1, 0, 0);
 8000a7e:	2300      	movs	r3, #0
 8000a80:	2200      	movs	r2, #0
 8000a82:	2101      	movs	r1, #1
 8000a84:	2001      	movs	r0, #1
 8000a86:	f000 fe63 	bl	8001750 <control_traffic_light>
		break;
 8000a8a:	e01a      	b.n	8000ac2 <traffic_light_adjustment+0x6a>
		control_traffic_light(0, 0, 1, 0);
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2100      	movs	r1, #0
 8000a92:	2000      	movs	r0, #0
 8000a94:	f000 fe5c 	bl	8001750 <control_traffic_light>
		control_traffic_light(1, 0, 1, 0);
 8000a98:	2300      	movs	r3, #0
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	f000 fe56 	bl	8001750 <control_traffic_light>
		break;
 8000aa4:	e00d      	b.n	8000ac2 <traffic_light_adjustment+0x6a>
		control_traffic_light(0, 0, 0, 1);
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 fe4f 	bl	8001750 <control_traffic_light>
		control_traffic_light(1, 0, 0, 1);
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f000 fe49 	bl	8001750 <control_traffic_light>
		break;
 8000abe:	e000      	b.n	8000ac2 <traffic_light_adjustment+0x6a>
		break;
 8000ac0:	bf00      	nop
	}
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000005c 	.word	0x2000005c

08000acc <fsm>:
		break;
	default:
		break;
	}
}
void fsm(void){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	if (is_timer_on(0)) {
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f000 ffd3 	bl	8001a7c <is_timer_on>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d015      	beq.n	8000b08 <fsm+0x3c>
		if (status != 0 || red == green + yellow) {
 8000adc:	4b67      	ldr	r3, [pc, #412]	; (8000c7c <fsm+0x1b0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d108      	bne.n	8000af6 <fsm+0x2a>
 8000ae4:	4b66      	ldr	r3, [pc, #408]	; (8000c80 <fsm+0x1b4>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b66      	ldr	r3, [pc, #408]	; (8000c84 <fsm+0x1b8>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	441a      	add	r2, r3
 8000aee:	4b66      	ldr	r3, [pc, #408]	; (8000c88 <fsm+0x1bc>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d102      	bne.n	8000afc <fsm+0x30>
			Scan7LED();
 8000af6:	f000 fe1d 	bl	8001734 <Scan7LED>
 8000afa:	e001      	b.n	8000b00 <fsm+0x34>
		} else {
			offallLED();
 8000afc:	f000 fd9e 	bl	800163c <offallLED>
		}
		set_timer(0, SCAN_7SEGLED_TIME);
 8000b00:	217d      	movs	r1, #125	; 0x7d
 8000b02:	2000      	movs	r0, #0
 8000b04:	f000 ff5c 	bl	80019c0 <set_timer>
	}
	switch (status) {
 8000b08:	4b5c      	ldr	r3, [pc, #368]	; (8000c7c <fsm+0x1b0>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b04      	cmp	r3, #4
 8000b0e:	f200 80b3 	bhi.w	8000c78 <fsm+0x1ac>
 8000b12:	a201      	add	r2, pc, #4	; (adr r2, 8000b18 <fsm+0x4c>)
 8000b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b18:	08000b2d 	.word	0x08000b2d
 8000b1c:	08000b8b 	.word	0x08000b8b
 8000b20:	08000bb9 	.word	0x08000bb9
 8000b24:	08000be7 	.word	0x08000be7
 8000b28:	08000c15 	.word	0x08000c15
	case 0:
		//Number dont add up
		if (red != green + yellow) {
 8000b2c:	4b54      	ldr	r3, [pc, #336]	; (8000c80 <fsm+0x1b4>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b54      	ldr	r3, [pc, #336]	; (8000c84 <fsm+0x1b8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	441a      	add	r2, r3
 8000b36:	4b54      	ldr	r3, [pc, #336]	; (8000c88 <fsm+0x1bc>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d00b      	beq.n	8000b56 <fsm+0x8a>
			red = temp[0];
 8000b3e:	4b53      	ldr	r3, [pc, #332]	; (8000c8c <fsm+0x1c0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a51      	ldr	r2, [pc, #324]	; (8000c88 <fsm+0x1bc>)
 8000b44:	6013      	str	r3, [r2, #0]
			yellow = temp[1];
 8000b46:	4b51      	ldr	r3, [pc, #324]	; (8000c8c <fsm+0x1c0>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	4a4e      	ldr	r2, [pc, #312]	; (8000c84 <fsm+0x1b8>)
 8000b4c:	6013      	str	r3, [r2, #0]
			green = temp[2];
 8000b4e:	4b4f      	ldr	r3, [pc, #316]	; (8000c8c <fsm+0x1c0>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	4a4b      	ldr	r2, [pc, #300]	; (8000c80 <fsm+0x1b4>)
 8000b54:	6013      	str	r3, [r2, #0]
		}
		if (is_timer_on(1)) {
 8000b56:	2001      	movs	r0, #1
 8000b58:	f000 ff90 	bl	8001a7c <is_timer_on>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d00e      	beq.n	8000b80 <fsm+0xb4>
			traffic_light_time1--;
 8000b62:	4b4b      	ldr	r3, [pc, #300]	; (8000c90 <fsm+0x1c4>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	4a49      	ldr	r2, [pc, #292]	; (8000c90 <fsm+0x1c4>)
 8000b6a:	6013      	str	r3, [r2, #0]
			traffic_light_time2--;
 8000b6c:	4b49      	ldr	r3, [pc, #292]	; (8000c94 <fsm+0x1c8>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	4a48      	ldr	r2, [pc, #288]	; (8000c94 <fsm+0x1c8>)
 8000b74:	6013      	str	r3, [r2, #0]
			set_timer(1, ONE_SECOND);
 8000b76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f000 ff20 	bl	80019c0 <set_timer>
		}
		fsm_traffic_light();
 8000b80:	f7ff feda 	bl	8000938 <fsm_traffic_light>
		button0();
 8000b84:	f000 f890 	bl	8000ca8 <button0>
		break;
 8000b88:	e076      	b.n	8000c78 <fsm+0x1ac>
	case 1:
		//RED adjustment
		if (prestatus == NOT_CHANGE) {
 8000b8a:	4b43      	ldr	r3, [pc, #268]	; (8000c98 <fsm+0x1cc>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d103      	bne.n	8000b9a <fsm+0xce>
			red_buffer = red;
 8000b92:	4b3d      	ldr	r3, [pc, #244]	; (8000c88 <fsm+0x1bc>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a41      	ldr	r2, [pc, #260]	; (8000c9c <fsm+0x1d0>)
 8000b98:	6013      	str	r3, [r2, #0]
		}
		number_set(red_buffer, 2);
 8000b9a:	4b40      	ldr	r3, [pc, #256]	; (8000c9c <fsm+0x1d0>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2102      	movs	r1, #2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 fe27 	bl	80017f4 <number_set>
		traffic_light_adjustment();
 8000ba6:	f7ff ff57 	bl	8000a58 <traffic_light_adjustment>

		button0();
 8000baa:	f000 f87d 	bl	8000ca8 <button0>
		button1();
 8000bae:	f000 f8ff 	bl	8000db0 <button1>
		button2();
 8000bb2:	f000 f8a5 	bl	8000d00 <button2>
		break;
 8000bb6:	e05f      	b.n	8000c78 <fsm+0x1ac>
	case 2:
		//YELLOW adjustment
		if (prestatus == NOT_CHANGE) {
 8000bb8:	4b37      	ldr	r3, [pc, #220]	; (8000c98 <fsm+0x1cc>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d103      	bne.n	8000bc8 <fsm+0xfc>
			yellow_buffer = yellow;
 8000bc0:	4b30      	ldr	r3, [pc, #192]	; (8000c84 <fsm+0x1b8>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a36      	ldr	r2, [pc, #216]	; (8000ca0 <fsm+0x1d4>)
 8000bc6:	6013      	str	r3, [r2, #0]
		}
		number_set(yellow_buffer, 3);
 8000bc8:	4b35      	ldr	r3, [pc, #212]	; (8000ca0 <fsm+0x1d4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2103      	movs	r1, #3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 fe10 	bl	80017f4 <number_set>
		traffic_light_adjustment();
 8000bd4:	f7ff ff40 	bl	8000a58 <traffic_light_adjustment>

		button0();
 8000bd8:	f000 f866 	bl	8000ca8 <button0>
		button1();
 8000bdc:	f000 f8e8 	bl	8000db0 <button1>
		button2();
 8000be0:	f000 f88e 	bl	8000d00 <button2>
		break;
 8000be4:	e048      	b.n	8000c78 <fsm+0x1ac>

	case 3:
	//GREEEN adjustment
	if (prestatus == NOT_CHANGE) {
 8000be6:	4b2c      	ldr	r3, [pc, #176]	; (8000c98 <fsm+0x1cc>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d103      	bne.n	8000bf6 <fsm+0x12a>
		green_buffer = green;
 8000bee:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <fsm+0x1b4>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a2c      	ldr	r2, [pc, #176]	; (8000ca4 <fsm+0x1d8>)
 8000bf4:	6013      	str	r3, [r2, #0]
	}
	number_set(green_buffer, 4);
 8000bf6:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <fsm+0x1d8>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 fdf9 	bl	80017f4 <number_set>
	traffic_light_adjustment();
 8000c02:	f7ff ff29 	bl	8000a58 <traffic_light_adjustment>

	button0();
 8000c06:	f000 f84f 	bl	8000ca8 <button0>
	button1();
 8000c0a:	f000 f8d1 	bl	8000db0 <button1>
	button2();
 8000c0e:	f000 f877 	bl	8000d00 <button2>
	break;
 8000c12:	e031      	b.n	8000c78 <fsm+0x1ac>
	case 4:
	//END adjustment, proceed to checking value
	if (green == 0 || red == 0 || yellow == 0 || red == green + yellow) {
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <fsm+0x1b4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d010      	beq.n	8000c3e <fsm+0x172>
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <fsm+0x1bc>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d00c      	beq.n	8000c3e <fsm+0x172>
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <fsm+0x1b8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d008      	beq.n	8000c3e <fsm+0x172>
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <fsm+0x1b4>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <fsm+0x1b8>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	441a      	add	r2, r3
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <fsm+0x1bc>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d10c      	bne.n	8000c58 <fsm+0x18c>
		red = temp[0];
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <fsm+0x1c0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a11      	ldr	r2, [pc, #68]	; (8000c88 <fsm+0x1bc>)
 8000c44:	6013      	str	r3, [r2, #0]
		yellow = temp[1];
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <fsm+0x1c0>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <fsm+0x1b8>)
 8000c4c:	6013      	str	r3, [r2, #0]
		green = temp[2];
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <fsm+0x1c0>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <fsm+0x1b4>)
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	e00b      	b.n	8000c70 <fsm+0x1a4>
	} else {
		temp[0] = red;
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <fsm+0x1bc>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <fsm+0x1c0>)
 8000c5e:	6013      	str	r3, [r2, #0]
		temp[1] = yellow;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <fsm+0x1b8>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a09      	ldr	r2, [pc, #36]	; (8000c8c <fsm+0x1c0>)
 8000c66:	6053      	str	r3, [r2, #4]
		temp[2] = green;
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <fsm+0x1b4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <fsm+0x1c0>)
 8000c6e:	6093      	str	r3, [r2, #8]
	}
	status = 0;
 8000c70:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <fsm+0x1b0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
}
}
 8000c76:	e7ff      	b.n	8000c78 <fsm+0x1ac>
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	2000005c 	.word	0x2000005c
 8000c80:	20000020 	.word	0x20000020
 8000c84:	2000001c 	.word	0x2000001c
 8000c88:	20000018 	.word	0x20000018
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	20000024 	.word	0x20000024
 8000c94:	20000028 	.word	0x20000028
 8000c98:	2000002e 	.word	0x2000002e
 8000c9c:	2000000c 	.word	0x2000000c
 8000ca0:	20000010 	.word	0x20000010
 8000ca4:	20000014 	.word	0x20000014

08000ca8 <button0>:

void button0(void){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	switch(button_state[0]){
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <button0+0x50>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d002      	beq.n	8000cba <button0+0x12>
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d00f      	beq.n	8000cd8 <button0+0x30>
		if(!is_button_pressed(0)){
			button_state[0]=0;
		}
		break;
	default:
		break;
 8000cb8:	e01b      	b.n	8000cf2 <button0+0x4a>
		if (is_button_pressed(0)) {
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 fa18 	bl	80010f0 <is_button_pressed>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d012      	beq.n	8000cec <button0+0x44>
			status++;
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <button0+0x54>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <button0+0x54>)
 8000cce:	6013      	str	r3, [r2, #0]
			button_state[0] = 1;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <button0+0x50>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]
		break;
 8000cd6:	e009      	b.n	8000cec <button0+0x44>
		if(!is_button_pressed(0)){
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f000 fa09 	bl	80010f0 <is_button_pressed>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d105      	bne.n	8000cf0 <button0+0x48>
			button_state[0]=0;
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <button0+0x50>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
		break;
 8000cea:	e001      	b.n	8000cf0 <button0+0x48>
		break;
 8000cec:	bf00      	nop
 8000cee:	e000      	b.n	8000cf2 <button0+0x4a>
		break;
 8000cf0:	bf00      	nop
	}
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000060 	.word	0x20000060
 8000cfc:	2000005c 	.word	0x2000005c

08000d00 <button2>:

void button2(void){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	switch(button_state[2]){
 8000d04:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <button2+0x8c>)
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d002      	beq.n	8000d12 <button2+0x12>
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d02e      	beq.n	8000d6e <button2+0x6e>
		if(!is_button_pressed(2)){
			button_state[2]=0;
		}
		break;
	default:
		break;
 8000d10:	e03a      	b.n	8000d88 <button2+0x88>
		if(is_button_pressed(2)){
 8000d12:	2002      	movs	r0, #2
 8000d14:	f000 f9ec 	bl	80010f0 <is_button_pressed>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d031      	beq.n	8000d82 <button2+0x82>
			switch(status){
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <button2+0x90>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b03      	cmp	r3, #3
 8000d24:	d016      	beq.n	8000d54 <button2+0x54>
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	dc1c      	bgt.n	8000d64 <button2+0x64>
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d002      	beq.n	8000d34 <button2+0x34>
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d008      	beq.n	8000d44 <button2+0x44>
				break;
 8000d32:	e017      	b.n	8000d64 <button2+0x64>
				red=red_buffer;
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <button2+0x94>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <button2+0x98>)
 8000d3a:	6013      	str	r3, [r2, #0]
				prestatus= NOT_CHANGE;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <button2+0x9c>)
 8000d3e:	2202      	movs	r2, #2
 8000d40:	701a      	strb	r2, [r3, #0]
				break;
 8000d42:	e010      	b.n	8000d66 <button2+0x66>
				yellow=yellow_buffer;
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <button2+0xa0>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a16      	ldr	r2, [pc, #88]	; (8000da4 <button2+0xa4>)
 8000d4a:	6013      	str	r3, [r2, #0]
				prestatus= NOT_CHANGE;
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <button2+0x9c>)
 8000d4e:	2202      	movs	r2, #2
 8000d50:	701a      	strb	r2, [r3, #0]
				break;
 8000d52:	e008      	b.n	8000d66 <button2+0x66>
				green= green_buffer;
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <button2+0xa8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a14      	ldr	r2, [pc, #80]	; (8000dac <button2+0xac>)
 8000d5a:	6013      	str	r3, [r2, #0]
				prestatus= NOT_CHANGE;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <button2+0x9c>)
 8000d5e:	2202      	movs	r2, #2
 8000d60:	701a      	strb	r2, [r3, #0]
				break;
 8000d62:	e000      	b.n	8000d66 <button2+0x66>
				break;
 8000d64:	bf00      	nop
			button_state[2]=1;
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <button2+0x8c>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	609a      	str	r2, [r3, #8]
		break;
 8000d6c:	e009      	b.n	8000d82 <button2+0x82>
		if(!is_button_pressed(2)){
 8000d6e:	2002      	movs	r0, #2
 8000d70:	f000 f9be 	bl	80010f0 <is_button_pressed>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d105      	bne.n	8000d86 <button2+0x86>
			button_state[2]=0;
 8000d7a:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <button2+0x8c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
		break;
 8000d80:	e001      	b.n	8000d86 <button2+0x86>
		break;
 8000d82:	bf00      	nop
 8000d84:	e000      	b.n	8000d88 <button2+0x88>
		break;
 8000d86:	bf00      	nop
	}
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000060 	.word	0x20000060
 8000d90:	2000005c 	.word	0x2000005c
 8000d94:	2000000c 	.word	0x2000000c
 8000d98:	20000018 	.word	0x20000018
 8000d9c:	2000002e 	.word	0x2000002e
 8000da0:	20000010 	.word	0x20000010
 8000da4:	2000001c 	.word	0x2000001c
 8000da8:	20000014 	.word	0x20000014
 8000dac:	20000020 	.word	0x20000020

08000db0 <button1>:

void button1(void){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	switch(button_state[1]){
 8000db4:	4b47      	ldr	r3, [pc, #284]	; (8000ed4 <button1+0x124>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d04b      	beq.n	8000e54 <button1+0xa4>
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	f300 8087 	bgt.w	8000ed0 <button1+0x120>
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d002      	beq.n	8000dcc <button1+0x1c>
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d030      	beq.n	8000e2c <button1+0x7c>
				}
				set_timer(4, ONE_SECOND);
			}
		}
	}
}
 8000dca:	e081      	b.n	8000ed0 <button1+0x120>
		if(is_button_pressed(1)){
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f000 f98f 	bl	80010f0 <is_button_pressed>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d029      	beq.n	8000e2c <button1+0x7c>
			switch(status){
 8000dd8:	4b3f      	ldr	r3, [pc, #252]	; (8000ed8 <button1+0x128>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d018      	beq.n	8000e12 <button1+0x62>
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	dc1f      	bgt.n	8000e24 <button1+0x74>
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d002      	beq.n	8000dee <button1+0x3e>
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d009      	beq.n	8000e00 <button1+0x50>
				break;
 8000dec:	e01a      	b.n	8000e24 <button1+0x74>
				red_buffer++;
 8000dee:	4b3b      	ldr	r3, [pc, #236]	; (8000edc <button1+0x12c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	3301      	adds	r3, #1
 8000df4:	4a39      	ldr	r2, [pc, #228]	; (8000edc <button1+0x12c>)
 8000df6:	6013      	str	r3, [r2, #0]
				prestatus= INCREASE_BY_1;
 8000df8:	4b39      	ldr	r3, [pc, #228]	; (8000ee0 <button1+0x130>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
				break;
 8000dfe:	e012      	b.n	8000e26 <button1+0x76>
				yellow_buffer++;
 8000e00:	4b38      	ldr	r3, [pc, #224]	; (8000ee4 <button1+0x134>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3301      	adds	r3, #1
 8000e06:	4a37      	ldr	r2, [pc, #220]	; (8000ee4 <button1+0x134>)
 8000e08:	6013      	str	r3, [r2, #0]
				prestatus= INCREASE_BY_1;
 8000e0a:	4b35      	ldr	r3, [pc, #212]	; (8000ee0 <button1+0x130>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
				break;
 8000e10:	e009      	b.n	8000e26 <button1+0x76>
				green_buffer++;
 8000e12:	4b35      	ldr	r3, [pc, #212]	; (8000ee8 <button1+0x138>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	3301      	adds	r3, #1
 8000e18:	4a33      	ldr	r2, [pc, #204]	; (8000ee8 <button1+0x138>)
 8000e1a:	6013      	str	r3, [r2, #0]
				prestatus= INCREASE_BY_1;
 8000e1c:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <button1+0x130>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
				break;
 8000e22:	e000      	b.n	8000e26 <button1+0x76>
				break;
 8000e24:	bf00      	nop
			button_state[1]=1;
 8000e26:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <button1+0x124>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	605a      	str	r2, [r3, #4]
		if(!is_button_pressed(1)){
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f000 f95f 	bl	80010f0 <is_button_pressed>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d103      	bne.n	8000e40 <button1+0x90>
			button_state[1]=0;
 8000e38:	4b26      	ldr	r3, [pc, #152]	; (8000ed4 <button1+0x124>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	605a      	str	r2, [r3, #4]
		break;
 8000e3e:	e046      	b.n	8000ece <button1+0x11e>
		else if(is_button_long_pressed(1)){
 8000e40:	2001      	movs	r0, #1
 8000e42:	f000 f96b 	bl	800111c <is_button_long_pressed>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d040      	beq.n	8000ece <button1+0x11e>
			button_state[1]=2;
 8000e4c:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <button1+0x124>)
 8000e4e:	2202      	movs	r2, #2
 8000e50:	605a      	str	r2, [r3, #4]
		break;
 8000e52:	e03c      	b.n	8000ece <button1+0x11e>
		if(!is_button_pressed(1)){
 8000e54:	2001      	movs	r0, #1
 8000e56:	f000 f94b 	bl	80010f0 <is_button_pressed>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d103      	bne.n	8000e68 <button1+0xb8>
			button_state[1]=0;
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <button1+0x124>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	605a      	str	r2, [r3, #4]
}
 8000e66:	e033      	b.n	8000ed0 <button1+0x120>
			if (is_timer_on(4)) {
 8000e68:	2004      	movs	r0, #4
 8000e6a:	f000 fe07 	bl	8001a7c <is_timer_on>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d02d      	beq.n	8000ed0 <button1+0x120>
				switch (status) {
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <button1+0x128>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d018      	beq.n	8000eae <button1+0xfe>
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	dc1f      	bgt.n	8000ec0 <button1+0x110>
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d002      	beq.n	8000e8a <button1+0xda>
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d009      	beq.n	8000e9c <button1+0xec>
					break;
 8000e88:	e01a      	b.n	8000ec0 <button1+0x110>
					red_buffer++;
 8000e8a:	4b14      	ldr	r3, [pc, #80]	; (8000edc <button1+0x12c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a12      	ldr	r2, [pc, #72]	; (8000edc <button1+0x12c>)
 8000e92:	6013      	str	r3, [r2, #0]
					prestatus = INCREASE_BY_1_OVER_TIME;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <button1+0x130>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]
					break;
 8000e9a:	e012      	b.n	8000ec2 <button1+0x112>
					yellow_buffer++;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <button1+0x134>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <button1+0x134>)
 8000ea4:	6013      	str	r3, [r2, #0]
					prestatus = INCREASE_BY_1_OVER_TIME;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <button1+0x130>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	701a      	strb	r2, [r3, #0]
					break;
 8000eac:	e009      	b.n	8000ec2 <button1+0x112>
					green_buffer++;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <button1+0x138>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <button1+0x138>)
 8000eb6:	6013      	str	r3, [r2, #0]
					prestatus = INCREASE_BY_1_OVER_TIME;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <button1+0x130>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
					break;
 8000ebe:	e000      	b.n	8000ec2 <button1+0x112>
					break;
 8000ec0:	bf00      	nop
				set_timer(4, ONE_SECOND);
 8000ec2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ec6:	2004      	movs	r0, #4
 8000ec8:	f000 fd7a 	bl	80019c0 <set_timer>
}
 8000ecc:	e000      	b.n	8000ed0 <button1+0x120>
		break;
 8000ece:	bf00      	nop
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000060 	.word	0x20000060
 8000ed8:	2000005c 	.word	0x2000005c
 8000edc:	2000000c 	.word	0x2000000c
 8000ee0:	2000002e 	.word	0x2000002e
 8000ee4:	20000010 	.word	0x20000010
 8000ee8:	20000014 	.word	0x20000014

08000eec <initial_button>:

	GPIO_TypeDef *gpio;
	uint16_t pin;
} button[NO_OF_BUTTONS];

void initial_button(void){
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
	for(int i=0;i < NO_OF_BUTTONS;i++){
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	e035      	b.n	8000f64 <initial_button+0x78>
		button[i].reg[0]= button[i].reg[1]=button[i].reg[2]= RELEASED;
 8000ef8:	4a28      	ldr	r2, [pc, #160]	; (8000f9c <initial_button+0xb0>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	015b      	lsls	r3, r3, #5
 8000efe:	4413      	add	r3, r2
 8000f00:	3308      	adds	r3, #8
 8000f02:	2201      	movs	r2, #1
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	4a25      	ldr	r2, [pc, #148]	; (8000f9c <initial_button+0xb0>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	015b      	lsls	r3, r3, #5
 8000f0c:	4413      	add	r3, r2
 8000f0e:	3308      	adds	r3, #8
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	4922      	ldr	r1, [pc, #136]	; (8000f9c <initial_button+0xb0>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	015b      	lsls	r3, r3, #5
 8000f18:	440b      	add	r3, r1
 8000f1a:	3304      	adds	r3, #4
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	4a1f      	ldr	r2, [pc, #124]	; (8000f9c <initial_button+0xb0>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	015b      	lsls	r3, r3, #5
 8000f24:	4413      	add	r3, r2
 8000f26:	3304      	adds	r3, #4
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	491c      	ldr	r1, [pc, #112]	; (8000f9c <initial_button+0xb0>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	015b      	lsls	r3, r3, #5
 8000f30:	440b      	add	r3, r1
 8000f32:	601a      	str	r2, [r3, #0]
		button[i].is_pressed= 0;
 8000f34:	4a19      	ldr	r2, [pc, #100]	; (8000f9c <initial_button+0xb0>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	015b      	lsls	r3, r3, #5
 8000f3a:	4413      	add	r3, r2
 8000f3c:	330c      	adds	r3, #12
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
		button[i].is_long_pressed= 0;
 8000f42:	4a16      	ldr	r2, [pc, #88]	; (8000f9c <initial_button+0xb0>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	015b      	lsls	r3, r3, #5
 8000f48:	4413      	add	r3, r2
 8000f4a:	3310      	adds	r3, #16
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
		button[i].timer= DURATION_FOR_LONG_PRESSED;
 8000f50:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <initial_button+0xb0>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	015b      	lsls	r3, r3, #5
 8000f56:	4413      	add	r3, r2
 8000f58:	3314      	adds	r3, #20
 8000f5a:	2264      	movs	r2, #100	; 0x64
 8000f5c:	601a      	str	r2, [r3, #0]
	for(int i=0;i < NO_OF_BUTTONS;i++){
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3301      	adds	r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	ddc6      	ble.n	8000ef8 <initial_button+0xc>
	}
	button[0].gpio= EN0_GPIO_Port;
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <initial_button+0xb0>)
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <initial_button+0xb4>)
 8000f6e:	619a      	str	r2, [r3, #24]
	button[0].pin= EN0_Pin;
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <initial_button+0xb0>)
 8000f72:	2208      	movs	r2, #8
 8000f74:	839a      	strh	r2, [r3, #28]
	button[1].gpio= EN1_GPIO_Port;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <initial_button+0xb0>)
 8000f78:	4a09      	ldr	r2, [pc, #36]	; (8000fa0 <initial_button+0xb4>)
 8000f7a:	639a      	str	r2, [r3, #56]	; 0x38
	button[1].pin= EN1_Pin;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <initial_button+0xb0>)
 8000f7e:	2210      	movs	r2, #16
 8000f80:	879a      	strh	r2, [r3, #60]	; 0x3c
	button[2].gpio= EN2_GPIO_Port;
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <initial_button+0xb0>)
 8000f84:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <initial_button+0xb4>)
 8000f86:	659a      	str	r2, [r3, #88]	; 0x58
	button[2].pin= EN2_Pin;
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <initial_button+0xb0>)
 8000f8a:	2220      	movs	r2, #32
 8000f8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000070 	.word	0x20000070
 8000fa0:	40010800 	.word	0x40010800

08000fa4 <button_reading>:
void button_reading(void){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
	for(int i=0; i< NO_OF_BUTTONS; i++){
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	e093      	b.n	80010d8 <button_reading+0x134>
		button[i].reg[0]= button[i].reg[1];
 8000fb0:	4a4e      	ldr	r2, [pc, #312]	; (80010ec <button_reading+0x148>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	015b      	lsls	r3, r3, #5
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3304      	adds	r3, #4
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	494b      	ldr	r1, [pc, #300]	; (80010ec <button_reading+0x148>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	015b      	lsls	r3, r3, #5
 8000fc2:	440b      	add	r3, r1
 8000fc4:	601a      	str	r2, [r3, #0]
		button[i].reg[1]= button[i].reg[2];
 8000fc6:	4a49      	ldr	r2, [pc, #292]	; (80010ec <button_reading+0x148>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	015b      	lsls	r3, r3, #5
 8000fcc:	4413      	add	r3, r2
 8000fce:	3308      	adds	r3, #8
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4946      	ldr	r1, [pc, #280]	; (80010ec <button_reading+0x148>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	015b      	lsls	r3, r3, #5
 8000fd8:	440b      	add	r3, r1
 8000fda:	3304      	adds	r3, #4
 8000fdc:	601a      	str	r2, [r3, #0]
		button[i].reg[2]= HAL_GPIO_ReadPin(button[i].gpio, button[i].pin);
 8000fde:	4a43      	ldr	r2, [pc, #268]	; (80010ec <button_reading+0x148>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	015b      	lsls	r3, r3, #5
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3318      	adds	r3, #24
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4940      	ldr	r1, [pc, #256]	; (80010ec <button_reading+0x148>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	015b      	lsls	r3, r3, #5
 8000ff0:	440b      	add	r3, r1
 8000ff2:	331c      	adds	r3, #28
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	f001 f85f 	bl	80020bc <HAL_GPIO_ReadPin>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4619      	mov	r1, r3
 8001002:	4a3a      	ldr	r2, [pc, #232]	; (80010ec <button_reading+0x148>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	015b      	lsls	r3, r3, #5
 8001008:	4413      	add	r3, r2
 800100a:	3308      	adds	r3, #8
 800100c:	6019      	str	r1, [r3, #0]
		if(button[i].reg[0] == button[i].reg[1] && button[i].reg[1] == button[i].reg[2]){
 800100e:	4a37      	ldr	r2, [pc, #220]	; (80010ec <button_reading+0x148>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	015b      	lsls	r3, r3, #5
 8001014:	4413      	add	r3, r2
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4934      	ldr	r1, [pc, #208]	; (80010ec <button_reading+0x148>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	015b      	lsls	r3, r3, #5
 800101e:	440b      	add	r3, r1
 8001020:	3304      	adds	r3, #4
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	429a      	cmp	r2, r3
 8001026:	d154      	bne.n	80010d2 <button_reading+0x12e>
 8001028:	4a30      	ldr	r2, [pc, #192]	; (80010ec <button_reading+0x148>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	015b      	lsls	r3, r3, #5
 800102e:	4413      	add	r3, r2
 8001030:	3304      	adds	r3, #4
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	492d      	ldr	r1, [pc, #180]	; (80010ec <button_reading+0x148>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	015b      	lsls	r3, r3, #5
 800103a:	440b      	add	r3, r1
 800103c:	3308      	adds	r3, #8
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d146      	bne.n	80010d2 <button_reading+0x12e>
			if(button[i].reg[2] == PRESSED){
 8001044:	4a29      	ldr	r2, [pc, #164]	; (80010ec <button_reading+0x148>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	015b      	lsls	r3, r3, #5
 800104a:	4413      	add	r3, r2
 800104c:	3308      	adds	r3, #8
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d124      	bne.n	800109e <button_reading+0xfa>
				button[i].is_pressed=1;
 8001054:	4a25      	ldr	r2, [pc, #148]	; (80010ec <button_reading+0x148>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	015b      	lsls	r3, r3, #5
 800105a:	4413      	add	r3, r2
 800105c:	330c      	adds	r3, #12
 800105e:	2201      	movs	r2, #1
 8001060:	601a      	str	r2, [r3, #0]
				if(button[i].timer > 0){
 8001062:	4a22      	ldr	r2, [pc, #136]	; (80010ec <button_reading+0x148>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	015b      	lsls	r3, r3, #5
 8001068:	4413      	add	r3, r2
 800106a:	3314      	adds	r3, #20
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	dd0d      	ble.n	800108e <button_reading+0xea>
					button[i].timer--;
 8001072:	4a1e      	ldr	r2, [pc, #120]	; (80010ec <button_reading+0x148>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	015b      	lsls	r3, r3, #5
 8001078:	4413      	add	r3, r2
 800107a:	3314      	adds	r3, #20
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	1e5a      	subs	r2, r3, #1
 8001080:	491a      	ldr	r1, [pc, #104]	; (80010ec <button_reading+0x148>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	015b      	lsls	r3, r3, #5
 8001086:	440b      	add	r3, r1
 8001088:	3314      	adds	r3, #20
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	e021      	b.n	80010d2 <button_reading+0x12e>
				}
				else{
					button[i].is_long_pressed=1;
 800108e:	4a17      	ldr	r2, [pc, #92]	; (80010ec <button_reading+0x148>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	015b      	lsls	r3, r3, #5
 8001094:	4413      	add	r3, r2
 8001096:	3310      	adds	r3, #16
 8001098:	2201      	movs	r2, #1
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	e019      	b.n	80010d2 <button_reading+0x12e>
				}
			}
			else{
				button[i].is_long_pressed= button[i].is_pressed=0;
 800109e:	4a13      	ldr	r2, [pc, #76]	; (80010ec <button_reading+0x148>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	015b      	lsls	r3, r3, #5
 80010a4:	4413      	add	r3, r2
 80010a6:	330c      	adds	r3, #12
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	4a0f      	ldr	r2, [pc, #60]	; (80010ec <button_reading+0x148>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	015b      	lsls	r3, r3, #5
 80010b2:	4413      	add	r3, r2
 80010b4:	330c      	adds	r3, #12
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	490c      	ldr	r1, [pc, #48]	; (80010ec <button_reading+0x148>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	015b      	lsls	r3, r3, #5
 80010be:	440b      	add	r3, r1
 80010c0:	3310      	adds	r3, #16
 80010c2:	601a      	str	r2, [r3, #0]
				button[i].timer= DURATION_FOR_LONG_PRESSED;
 80010c4:	4a09      	ldr	r2, [pc, #36]	; (80010ec <button_reading+0x148>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	015b      	lsls	r3, r3, #5
 80010ca:	4413      	add	r3, r2
 80010cc:	3314      	adds	r3, #20
 80010ce:	2264      	movs	r2, #100	; 0x64
 80010d0:	601a      	str	r2, [r3, #0]
	for(int i=0; i< NO_OF_BUTTONS; i++){
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3301      	adds	r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	f77f af68 	ble.w	8000fb0 <button_reading+0xc>
			}
		}
	}
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000070 	.word	0x20000070

080010f0 <is_button_pressed>:
int is_button_pressed(int index){
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	if(index >= NO_OF_BUTTONS) return 0;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	dd01      	ble.n	8001102 <is_button_pressed+0x12>
 80010fe:	2300      	movs	r3, #0
 8001100:	e005      	b.n	800110e <is_button_pressed+0x1e>
	return button[index].is_pressed;
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <is_button_pressed+0x28>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	015b      	lsls	r3, r3, #5
 8001108:	4413      	add	r3, r2
 800110a:	330c      	adds	r3, #12
 800110c:	681b      	ldr	r3, [r3, #0]
}
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	20000070 	.word	0x20000070

0800111c <is_button_long_pressed>:
int is_button_long_pressed(int index){
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	if(index >= NO_OF_BUTTONS) return 0;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b02      	cmp	r3, #2
 8001128:	dd01      	ble.n	800112e <is_button_long_pressed+0x12>
 800112a:	2300      	movs	r3, #0
 800112c:	e005      	b.n	800113a <is_button_long_pressed+0x1e>
		return button[index].is_long_pressed;
 800112e:	4a05      	ldr	r2, [pc, #20]	; (8001144 <is_button_long_pressed+0x28>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	015b      	lsls	r3, r3, #5
 8001134:	4413      	add	r3, r2
 8001136:	3310      	adds	r3, #16
 8001138:	681b      	ldr	r3, [r3, #0]
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	20000070 	.word	0x20000070

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114c:	f000 fccc 	bl	8001ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001150:	f000 f832 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001154:	f000 f8b8 	bl	80012c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001158:	f000 f86a 	bl	8001230 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800115c:	4815      	ldr	r0, [pc, #84]	; (80011b4 <main+0x6c>)
 800115e:	f001 fc09 	bl	8002974 <HAL_TIM_Base_Start_IT>
  	set_timer(0, SCAN_7SEGLED_TIME);
 8001162:	217d      	movs	r1, #125	; 0x7d
 8001164:	2000      	movs	r0, #0
 8001166:	f000 fc2b 	bl	80019c0 <set_timer>
  	set_timer(1, ONE_SECOND);
 800116a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800116e:	2001      	movs	r0, #1
 8001170:	f000 fc26 	bl	80019c0 <set_timer>
  	set_timer(2, READ_BUTTON_TIME);
 8001174:	210a      	movs	r1, #10
 8001176:	2002      	movs	r0, #2
 8001178:	f000 fc22 	bl	80019c0 <set_timer>
  	set_timer(3, TOGGLE_TIME);
 800117c:	21fa      	movs	r1, #250	; 0xfa
 800117e:	2003      	movs	r0, #3
 8001180:	f000 fc1e 	bl	80019c0 <set_timer>
  	set_timer(4, ONE_SECOND);
 8001184:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001188:	2004      	movs	r0, #4
 800118a:	f000 fc19 	bl	80019c0 <set_timer>
  	initial_led();
 800118e:	f000 fb81 	bl	8001894 <initial_led>
  	initial_button();
 8001192:	f7ff feab 	bl	8000eec <initial_button>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(is_timer_on(2)){
 8001196:	2002      	movs	r0, #2
 8001198:	f000 fc70 	bl	8001a7c <is_timer_on>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <main+0x66>
	 		  button_reading();
 80011a2:	f7ff feff 	bl	8000fa4 <button_reading>
	 		  set_timer(2, READ_BUTTON_TIME);
 80011a6:	210a      	movs	r1, #10
 80011a8:	2002      	movs	r0, #2
 80011aa:	f000 fc09 	bl	80019c0 <set_timer>
	 	  }
	 	  fsm();
 80011ae:	f7ff fc8d 	bl	8000acc <fsm>
	  if(is_timer_on(2)){
 80011b2:	e7f0      	b.n	8001196 <main+0x4e>
 80011b4:	200000d0 	.word	0x200000d0

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b090      	sub	sp, #64	; 0x40
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0318 	add.w	r3, r7, #24
 80011c2:	2228      	movs	r2, #40	; 0x28
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 ff90 	bl	80030ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011da:	2302      	movs	r3, #2
 80011dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011de:	2301      	movs	r3, #1
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e2:	2310      	movs	r3, #16
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 ff94 	bl	800211c <HAL_RCC_OscConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011fa:	f000 f8cf 	bl	800139c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fe:	230f      	movs	r3, #15
 8001200:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f001 fa00 	bl	800261c <HAL_RCC_ClockConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001222:	f000 f8bb 	bl	800139c <Error_Handler>
  }
}
 8001226:	bf00      	nop
 8001228:	3740      	adds	r7, #64	; 0x40
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001236:	f107 0308 	add.w	r3, r7, #8
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	463b      	mov	r3, r7
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <MX_TIM2_Init+0x94>)
 800124e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001252:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <MX_TIM2_Init+0x94>)
 8001256:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800125a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <MX_TIM2_Init+0x94>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <MX_TIM2_Init+0x94>)
 8001264:	2209      	movs	r2, #9
 8001266:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <MX_TIM2_Init+0x94>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <MX_TIM2_Init+0x94>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001274:	4813      	ldr	r0, [pc, #76]	; (80012c4 <MX_TIM2_Init+0x94>)
 8001276:	f001 fb2d 	bl	80028d4 <HAL_TIM_Base_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001280:	f000 f88c 	bl	800139c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001288:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	4619      	mov	r1, r3
 8001290:	480c      	ldr	r0, [pc, #48]	; (80012c4 <MX_TIM2_Init+0x94>)
 8001292:	f001 fcc3 	bl	8002c1c <HAL_TIM_ConfigClockSource>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800129c:	f000 f87e 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012a8:	463b      	mov	r3, r7
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_TIM2_Init+0x94>)
 80012ae:	f001 fe8f 	bl	8002fd0 <HAL_TIMEx_MasterConfigSynchronization>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012b8:	f000 f870 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200000d0 	.word	0x200000d0

080012c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012dc:	4b27      	ldr	r3, [pc, #156]	; (800137c <MX_GPIO_Init+0xb4>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a26      	ldr	r2, [pc, #152]	; (800137c <MX_GPIO_Init+0xb4>)
 80012e2:	f043 0304 	orr.w	r3, r3, #4
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b24      	ldr	r3, [pc, #144]	; (800137c <MX_GPIO_Init+0xb4>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f4:	4b21      	ldr	r3, [pc, #132]	; (800137c <MX_GPIO_Init+0xb4>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a20      	ldr	r2, [pc, #128]	; (800137c <MX_GPIO_Init+0xb4>)
 80012fa:	f043 0308 	orr.w	r3, r3, #8
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b1e      	ldr	r3, [pc, #120]	; (800137c <MX_GPIO_Init+0xb4>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 800130c:	2200      	movs	r2, #0
 800130e:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8001312:	481b      	ldr	r0, [pc, #108]	; (8001380 <MX_GPIO_Init+0xb8>)
 8001314:	f000 fee9 	bl	80020ea <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|GREEN2_Pin|SEG7_0_Pin|SEG7_1_Pin
                          |SEG7_2_Pin|SEG7_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8001318:	2200      	movs	r2, #0
 800131a:	217f      	movs	r1, #127	; 0x7f
 800131c:	4819      	ldr	r0, [pc, #100]	; (8001384 <MX_GPIO_Init+0xbc>)
 800131e:	f000 fee4 	bl	80020ea <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin;
 8001322:	2338      	movs	r3, #56	; 0x38
 8001324:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f107 0308 	add.w	r3, r7, #8
 8001332:	4619      	mov	r1, r3
 8001334:	4812      	ldr	r0, [pc, #72]	; (8001380 <MX_GPIO_Init+0xb8>)
 8001336:	f000 fd47 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin SEG7_0_Pin SEG7_1_Pin
                           SEG7_2_Pin SEG7_3_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 800133a:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 800133e:	60bb      	str	r3, [r7, #8]
                          |YELLOW2_Pin|GREEN2_Pin|SEG7_0_Pin|SEG7_1_Pin
                          |SEG7_2_Pin|SEG7_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2302      	movs	r3, #2
 800134a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	4619      	mov	r1, r3
 8001352:	480b      	ldr	r0, [pc, #44]	; (8001380 <MX_GPIO_Init+0xb8>)
 8001354:	f000 fd38 	bl	8001dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8001358:	237f      	movs	r3, #127	; 0x7f
 800135a:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2302      	movs	r3, #2
 8001366:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	4619      	mov	r1, r3
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_GPIO_Init+0xbc>)
 8001370:	f000 fd2a 	bl	8001dc8 <HAL_GPIO_Init>

}
 8001374:	bf00      	nop
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000
 8001380:	40010800 	.word	0x40010800
 8001384:	40010c00 	.word	0x40010c00

08001388 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 run_timer();
 8001390:	f000 fb42 	bl	8001a18 <run_timer>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <Error_Handler+0x8>
	...

080013a8 <display>:
	uint16_t green;
} traffic_light[2];

void display( GPIO_PinState seg0, GPIO_PinState seg1,
		GPIO_PinState seg2, GPIO_PinState seg3, GPIO_PinState seg4,
		GPIO_PinState seg5, GPIO_PinState seg6) {
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4604      	mov	r4, r0
 80013b0:	4608      	mov	r0, r1
 80013b2:	4611      	mov	r1, r2
 80013b4:	461a      	mov	r2, r3
 80013b6:	4623      	mov	r3, r4
 80013b8:	71fb      	strb	r3, [r7, #7]
 80013ba:	4603      	mov	r3, r0
 80013bc:	71bb      	strb	r3, [r7, #6]
 80013be:	460b      	mov	r3, r1
 80013c0:	717b      	strb	r3, [r7, #5]
 80013c2:	4613      	mov	r3, r2
 80013c4:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(LED.gpio, LED.pin_0, seg0);
 80013c6:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <display+0x98>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a1d      	ldr	r2, [pc, #116]	; (8001440 <display+0x98>)
 80013cc:	8891      	ldrh	r1, [r2, #4]
 80013ce:	79fa      	ldrb	r2, [r7, #7]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 fe8a 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED.gpio, LED.pin_1, seg1);
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <display+0x98>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a19      	ldr	r2, [pc, #100]	; (8001440 <display+0x98>)
 80013dc:	88d1      	ldrh	r1, [r2, #6]
 80013de:	79ba      	ldrb	r2, [r7, #6]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 fe82 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED.gpio, LED.pin_2, seg2);
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <display+0x98>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a15      	ldr	r2, [pc, #84]	; (8001440 <display+0x98>)
 80013ec:	8911      	ldrh	r1, [r2, #8]
 80013ee:	797a      	ldrb	r2, [r7, #5]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 fe7a 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED.gpio, LED.pin_3, seg3);
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <display+0x98>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a11      	ldr	r2, [pc, #68]	; (8001440 <display+0x98>)
 80013fc:	8951      	ldrh	r1, [r2, #10]
 80013fe:	793a      	ldrb	r2, [r7, #4]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fe72 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED.gpio, LED.pin_4, seg4);
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <display+0x98>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <display+0x98>)
 800140c:	8991      	ldrh	r1, [r2, #12]
 800140e:	7e3a      	ldrb	r2, [r7, #24]
 8001410:	4618      	mov	r0, r3
 8001412:	f000 fe6a 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED.gpio, LED.pin_5, seg5);
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <display+0x98>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a09      	ldr	r2, [pc, #36]	; (8001440 <display+0x98>)
 800141c:	89d1      	ldrh	r1, [r2, #14]
 800141e:	7f3a      	ldrb	r2, [r7, #28]
 8001420:	4618      	mov	r0, r3
 8001422:	f000 fe62 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED.gpio, LED.pin_6, seg6);
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <display+0x98>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <display+0x98>)
 800142c:	8a11      	ldrh	r1, [r2, #16]
 800142e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001432:	4618      	mov	r0, r3
 8001434:	f000 fe59 	bl	80020ea <HAL_GPIO_WritePin>
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	bd90      	pop	{r4, r7, pc}
 8001440:	20000118 	.word	0x20000118

08001444 <Display7LED>:
void Display7LED( int n){
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af04      	add	r7, sp, #16
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b09      	cmp	r3, #9
 8001450:	f200 809a 	bhi.w	8001588 <Display7LED+0x144>
 8001454:	a201      	add	r2, pc, #4	; (adr r2, 800145c <Display7LED+0x18>)
 8001456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145a:	bf00      	nop
 800145c:	08001485 	.word	0x08001485
 8001460:	0800149f 	.word	0x0800149f
 8001464:	080014b9 	.word	0x080014b9
 8001468:	080014d3 	.word	0x080014d3
 800146c:	080014ed 	.word	0x080014ed
 8001470:	08001507 	.word	0x08001507
 8001474:	08001521 	.word	0x08001521
 8001478:	0800153b 	.word	0x0800153b
 800147c:	08001555 	.word	0x08001555
 8001480:	0800156f 	.word	0x0800156f
	switch (n) {
	case 0:
		display(0, 0, 0, 0, 0, 0, 1);
 8001484:	2301      	movs	r3, #1
 8001486:	9302      	str	r3, [sp, #8]
 8001488:	2300      	movs	r3, #0
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	2300      	movs	r3, #0
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2300      	movs	r3, #0
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff ff86 	bl	80013a8 <display>
		break;
 800149c:	e081      	b.n	80015a2 <Display7LED+0x15e>
	case 1:
		display(1, 0, 0, 1, 1, 1, 1);
 800149e:	2301      	movs	r3, #1
 80014a0:	9302      	str	r3, [sp, #8]
 80014a2:	2301      	movs	r3, #1
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	2301      	movs	r3, #1
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	2301      	movs	r3, #1
 80014ac:	2200      	movs	r2, #0
 80014ae:	2100      	movs	r1, #0
 80014b0:	2001      	movs	r0, #1
 80014b2:	f7ff ff79 	bl	80013a8 <display>
		break;
 80014b6:	e074      	b.n	80015a2 <Display7LED+0x15e>
	case 2:
		display(0, 0, 1, 0, 0, 1, 0);
 80014b8:	2300      	movs	r3, #0
 80014ba:	9302      	str	r3, [sp, #8]
 80014bc:	2301      	movs	r3, #1
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	2300      	movs	r3, #0
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2300      	movs	r3, #0
 80014c6:	2201      	movs	r2, #1
 80014c8:	2100      	movs	r1, #0
 80014ca:	2000      	movs	r0, #0
 80014cc:	f7ff ff6c 	bl	80013a8 <display>
		break;
 80014d0:	e067      	b.n	80015a2 <Display7LED+0x15e>
	case 3:
		display(0, 0, 0, 0, 1, 1, 0);
 80014d2:	2300      	movs	r3, #0
 80014d4:	9302      	str	r3, [sp, #8]
 80014d6:	2301      	movs	r3, #1
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	2301      	movs	r3, #1
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2300      	movs	r3, #0
 80014e0:	2200      	movs	r2, #0
 80014e2:	2100      	movs	r1, #0
 80014e4:	2000      	movs	r0, #0
 80014e6:	f7ff ff5f 	bl	80013a8 <display>
		break;
 80014ea:	e05a      	b.n	80015a2 <Display7LED+0x15e>
	case 4:
		display(1, 0, 0, 1, 1, 0, 0);
 80014ec:	2300      	movs	r3, #0
 80014ee:	9302      	str	r3, [sp, #8]
 80014f0:	2300      	movs	r3, #0
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	2301      	movs	r3, #1
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2301      	movs	r3, #1
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2001      	movs	r0, #1
 8001500:	f7ff ff52 	bl	80013a8 <display>
		break;
 8001504:	e04d      	b.n	80015a2 <Display7LED+0x15e>
	case 5:
		display(0, 1, 0, 0, 1, 0, 0);
 8001506:	2300      	movs	r3, #0
 8001508:	9302      	str	r3, [sp, #8]
 800150a:	2300      	movs	r3, #0
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	2301      	movs	r3, #1
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	2300      	movs	r3, #0
 8001514:	2200      	movs	r2, #0
 8001516:	2101      	movs	r1, #1
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff ff45 	bl	80013a8 <display>
		break;
 800151e:	e040      	b.n	80015a2 <Display7LED+0x15e>
	case 6:
		display(0, 1, 0, 0, 0, 0, 0);
 8001520:	2300      	movs	r3, #0
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	2300      	movs	r3, #0
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	2300      	movs	r3, #0
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2300      	movs	r3, #0
 800152e:	2200      	movs	r2, #0
 8001530:	2101      	movs	r1, #1
 8001532:	2000      	movs	r0, #0
 8001534:	f7ff ff38 	bl	80013a8 <display>
		break;
 8001538:	e033      	b.n	80015a2 <Display7LED+0x15e>
	case 7:
		display(0, 0, 0, 1, 1, 1, 1);
 800153a:	2301      	movs	r3, #1
 800153c:	9302      	str	r3, [sp, #8]
 800153e:	2301      	movs	r3, #1
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	2301      	movs	r3, #1
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2301      	movs	r3, #1
 8001548:	2200      	movs	r2, #0
 800154a:	2100      	movs	r1, #0
 800154c:	2000      	movs	r0, #0
 800154e:	f7ff ff2b 	bl	80013a8 <display>
		break;
 8001552:	e026      	b.n	80015a2 <Display7LED+0x15e>
	case 8:
		display(0, 0, 0, 0, 0, 0, 0);
 8001554:	2300      	movs	r3, #0
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	2300      	movs	r3, #0
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	2300      	movs	r3, #0
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	2300      	movs	r3, #0
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	2000      	movs	r0, #0
 8001568:	f7ff ff1e 	bl	80013a8 <display>
		break;
 800156c:	e019      	b.n	80015a2 <Display7LED+0x15e>
	case 9:
		display(0, 0, 0, 0, 1, 0, 0);
 800156e:	2300      	movs	r3, #0
 8001570:	9302      	str	r3, [sp, #8]
 8001572:	2300      	movs	r3, #0
 8001574:	9301      	str	r3, [sp, #4]
 8001576:	2301      	movs	r3, #1
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2300      	movs	r3, #0
 800157c:	2200      	movs	r2, #0
 800157e:	2100      	movs	r1, #0
 8001580:	2000      	movs	r0, #0
 8001582:	f7ff ff11 	bl	80013a8 <display>
		break;
 8001586:	e00c      	b.n	80015a2 <Display7LED+0x15e>
	default:
		display(1, 1, 1, 1, 1, 1, 1);
 8001588:	2301      	movs	r3, #1
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	2301      	movs	r3, #1
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	2301      	movs	r3, #1
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2301      	movs	r3, #1
 8001596:	2201      	movs	r2, #1
 8001598:	2101      	movs	r1, #1
 800159a:	2001      	movs	r0, #1
 800159c:	f7ff ff04 	bl	80013a8 <display>
	}
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop

080015ac <initial7LED>:
void initial7LED(void){
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
	LED.gpio=SEG_GPIO_Port;
 80015b0:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <initial7LED+0x3c>)
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <initial7LED+0x40>)
 80015b4:	601a      	str	r2, [r3, #0]
	LED.pin_0=SEG0_Pin;
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <initial7LED+0x3c>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	809a      	strh	r2, [r3, #4]
	LED.pin_1=SEG1_Pin;
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <initial7LED+0x3c>)
 80015be:	2202      	movs	r2, #2
 80015c0:	80da      	strh	r2, [r3, #6]
	LED.pin_2=SEG2_Pin;
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <initial7LED+0x3c>)
 80015c4:	2204      	movs	r2, #4
 80015c6:	811a      	strh	r2, [r3, #8]
	LED.pin_3=SEG3_Pin;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <initial7LED+0x3c>)
 80015ca:	2208      	movs	r2, #8
 80015cc:	815a      	strh	r2, [r3, #10]
	LED.pin_4=SEG4_Pin;
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <initial7LED+0x3c>)
 80015d0:	2210      	movs	r2, #16
 80015d2:	819a      	strh	r2, [r3, #12]
	LED.pin_5=SEG5_Pin;
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <initial7LED+0x3c>)
 80015d6:	2220      	movs	r2, #32
 80015d8:	81da      	strh	r2, [r3, #14]
	LED.pin_6=SEG6_Pin;
 80015da:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <initial7LED+0x3c>)
 80015dc:	2240      	movs	r2, #64	; 0x40
 80015de:	821a      	strh	r2, [r3, #16]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	20000118 	.word	0x20000118
 80015ec:	40010c00 	.word	0x40010c00

080015f0 <initial_traffic_light>:
void initial_traffic_light(void){
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
	traffic_light[0].gpio = TRAFFIC1_GPIO_Port;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <initial_traffic_light+0x44>)
 80015f6:	4a10      	ldr	r2, [pc, #64]	; (8001638 <initial_traffic_light+0x48>)
 80015f8:	601a      	str	r2, [r3, #0]
	traffic_light[0].red = RED1_Pin;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <initial_traffic_light+0x44>)
 80015fc:	2240      	movs	r2, #64	; 0x40
 80015fe:	809a      	strh	r2, [r3, #4]
	traffic_light[0].yellow = YELLOW1_Pin;
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <initial_traffic_light+0x44>)
 8001602:	2280      	movs	r2, #128	; 0x80
 8001604:	80da      	strh	r2, [r3, #6]
	traffic_light[0].green = GREEN1_Pin;
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <initial_traffic_light+0x44>)
 8001608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800160c:	811a      	strh	r2, [r3, #8]

	traffic_light[1].gpio = TRAFFIC2_GPIO_Port;
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <initial_traffic_light+0x44>)
 8001610:	4a09      	ldr	r2, [pc, #36]	; (8001638 <initial_traffic_light+0x48>)
 8001612:	60da      	str	r2, [r3, #12]
	traffic_light[1].red = RED2_Pin;
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <initial_traffic_light+0x44>)
 8001616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161a:	821a      	strh	r2, [r3, #16]
	traffic_light[1].yellow = YELLOW2_Pin;
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <initial_traffic_light+0x44>)
 800161e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001622:	825a      	strh	r2, [r3, #18]
	traffic_light[1].green = GREEN2_Pin;
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <initial_traffic_light+0x44>)
 8001626:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800162a:	829a      	strh	r2, [r3, #20]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	2000002c 	.word	0x2000002c
 8001638:	40010800 	.word	0x40010800

0800163c <offallLED>:
void offallLED(void){
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, SEG7_0_Pin, 1);
 8001640:	2201      	movs	r2, #1
 8001642:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001646:	480b      	ldr	r0, [pc, #44]	; (8001674 <offallLED+0x38>)
 8001648:	f000 fd4f 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG7_1_Pin, 1);
 800164c:	2201      	movs	r2, #1
 800164e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001652:	4808      	ldr	r0, [pc, #32]	; (8001674 <offallLED+0x38>)
 8001654:	f000 fd49 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG7_2_Pin, 1);
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <offallLED+0x38>)
 8001660:	f000 fd43 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, SEG7_3_Pin, 1);
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800166a:	4802      	ldr	r0, [pc, #8]	; (8001674 <offallLED+0x38>)
 800166c:	f000 fd3d 	bl	80020ea <HAL_GPIO_WritePin>
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40010800 	.word	0x40010800

08001678 <update7LED>:
void update7LED(int index){
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	if (index >= 4 || index < 0) index = 0;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b03      	cmp	r3, #3
 8001684:	dc02      	bgt.n	800168c <update7LED+0x14>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	da01      	bge.n	8001690 <update7LED+0x18>
 800168c:	2300      	movs	r3, #0
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b03      	cmp	r3, #3
 8001694:	d842      	bhi.n	800171c <update7LED+0xa4>
 8001696:	a201      	add	r2, pc, #4	; (adr r2, 800169c <update7LED+0x24>)
 8001698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169c:	080016ad 	.word	0x080016ad
 80016a0:	080016c9 	.word	0x080016c9
 80016a4:	080016e5 	.word	0x080016e5
 80016a8:	08001701 	.word	0x08001701
	switch (index) {
	case 0:
		offallLED();
 80016ac:	f7ff ffc6 	bl	800163c <offallLED>
		HAL_GPIO_WritePin(GPIOA, SEG7_0_Pin, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016b6:	481d      	ldr	r0, [pc, #116]	; (800172c <update7LED+0xb4>)
 80016b8:	f000 fd17 	bl	80020ea <HAL_GPIO_WritePin>
		Display7LED(led_buffer[0]);
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <update7LED+0xb8>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff febf 	bl	8001444 <Display7LED>
		break;
 80016c6:	e02c      	b.n	8001722 <update7LED+0xaa>
	case 1:
		offallLED();
 80016c8:	f7ff ffb8 	bl	800163c <offallLED>
		HAL_GPIO_WritePin(GPIOA, SEG7_1_Pin, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d2:	4816      	ldr	r0, [pc, #88]	; (800172c <update7LED+0xb4>)
 80016d4:	f000 fd09 	bl	80020ea <HAL_GPIO_WritePin>
		Display7LED(led_buffer[1]);
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <update7LED+0xb8>)
 80016da:	785b      	ldrb	r3, [r3, #1]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff feb1 	bl	8001444 <Display7LED>
		break;
 80016e2:	e01e      	b.n	8001722 <update7LED+0xaa>
	case 2:
		offallLED();
 80016e4:	f7ff ffaa 	bl	800163c <offallLED>
		HAL_GPIO_WritePin(GPIOA, SEG7_2_Pin, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016ee:	480f      	ldr	r0, [pc, #60]	; (800172c <update7LED+0xb4>)
 80016f0:	f000 fcfb 	bl	80020ea <HAL_GPIO_WritePin>
		Display7LED(led_buffer[2]);
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <update7LED+0xb8>)
 80016f6:	789b      	ldrb	r3, [r3, #2]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fea3 	bl	8001444 <Display7LED>
		break;
 80016fe:	e010      	b.n	8001722 <update7LED+0xaa>
	case 3:
		offallLED();
 8001700:	f7ff ff9c 	bl	800163c <offallLED>
		HAL_GPIO_WritePin(GPIOA, SEG7_3_Pin, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800170a:	4808      	ldr	r0, [pc, #32]	; (800172c <update7LED+0xb4>)
 800170c:	f000 fced 	bl	80020ea <HAL_GPIO_WritePin>
		Display7LED(led_buffer[3]);
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <update7LED+0xb8>)
 8001712:	78db      	ldrb	r3, [r3, #3]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fe95 	bl	8001444 <Display7LED>
		break;
 800171a:	e002      	b.n	8001722 <update7LED+0xaa>
	default:
		offallLED();
 800171c:	f7ff ff8e 	bl	800163c <offallLED>
	}
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40010800 	.word	0x40010800
 8001730:	20000030 	.word	0x20000030

08001734 <Scan7LED>:
void Scan7LED(void){
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	update7LED(index++);
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <Scan7LED+0x18>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	4903      	ldr	r1, [pc, #12]	; (800174c <Scan7LED+0x18>)
 8001740:	600a      	str	r2, [r1, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff98 	bl	8001678 <update7LED>
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	2000006c 	.word	0x2000006c

08001750 <control_traffic_light>:
// 0 is off, 1 is on
void control_traffic_light(int i, GPIO_PinState red, GPIO_PinState yellow, GPIO_PinState green){
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	4608      	mov	r0, r1
 800175a:	4611      	mov	r1, r2
 800175c:	461a      	mov	r2, r3
 800175e:	4603      	mov	r3, r0
 8001760:	70fb      	strb	r3, [r7, #3]
 8001762:	460b      	mov	r3, r1
 8001764:	70bb      	strb	r3, [r7, #2]
 8001766:	4613      	mov	r3, r2
 8001768:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(traffic_light[i].gpio, traffic_light[i].red, red);
 800176a:	4921      	ldr	r1, [pc, #132]	; (80017f0 <control_traffic_light+0xa0>)
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4413      	add	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	440b      	add	r3, r1
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	491d      	ldr	r1, [pc, #116]	; (80017f0 <control_traffic_light+0xa0>)
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	3304      	adds	r3, #4
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	78fa      	ldrb	r2, [r7, #3]
 800178e:	4619      	mov	r1, r3
 8001790:	f000 fcab 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(traffic_light[i].gpio, traffic_light[i].yellow, yellow);
 8001794:	4916      	ldr	r1, [pc, #88]	; (80017f0 <control_traffic_light+0xa0>)
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	6818      	ldr	r0, [r3, #0]
 80017a4:	4912      	ldr	r1, [pc, #72]	; (80017f0 <control_traffic_light+0xa0>)
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	4413      	add	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	3306      	adds	r3, #6
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	78ba      	ldrb	r2, [r7, #2]
 80017b8:	4619      	mov	r1, r3
 80017ba:	f000 fc96 	bl	80020ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(traffic_light[i].gpio, traffic_light[i].green, green);
 80017be:	490c      	ldr	r1, [pc, #48]	; (80017f0 <control_traffic_light+0xa0>)
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	4908      	ldr	r1, [pc, #32]	; (80017f0 <control_traffic_light+0xa0>)
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	3308      	adds	r3, #8
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	787a      	ldrb	r2, [r7, #1]
 80017e2:	4619      	mov	r1, r3
 80017e4:	f000 fc81 	bl	80020ea <HAL_GPIO_WritePin>
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	2000002c 	.word	0x2000002c

080017f4 <number_set>:

void number_set(int n1, int n2){
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
	if(n1 > 99 || n1 < 0){
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b63      	cmp	r3, #99	; 0x63
 8001802:	dc02      	bgt.n	800180a <number_set+0x16>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	da01      	bge.n	800180e <number_set+0x1a>
		n1 = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
	}
	if(n2 > 99 || n2 < 0){
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	2b63      	cmp	r3, #99	; 0x63
 8001812:	dc02      	bgt.n	800181a <number_set+0x26>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	da01      	bge.n	800181e <number_set+0x2a>
		n2 = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	603b      	str	r3, [r7, #0]
	}
	led_buffer[0]= n1/10;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a1a      	ldr	r2, [pc, #104]	; (800188c <number_set+0x98>)
 8001822:	fb82 1203 	smull	r1, r2, r2, r3
 8001826:	1092      	asrs	r2, r2, #2
 8001828:	17db      	asrs	r3, r3, #31
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4b18      	ldr	r3, [pc, #96]	; (8001890 <number_set+0x9c>)
 8001830:	701a      	strb	r2, [r3, #0]
	led_buffer[1]= n1%10;
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <number_set+0x98>)
 8001836:	fb83 1302 	smull	r1, r3, r3, r2
 800183a:	1099      	asrs	r1, r3, #2
 800183c:	17d3      	asrs	r3, r2, #31
 800183e:	1ac9      	subs	r1, r1, r3
 8001840:	460b      	mov	r3, r1
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	1ad1      	subs	r1, r2, r3
 800184a:	b2ca      	uxtb	r2, r1
 800184c:	4b10      	ldr	r3, [pc, #64]	; (8001890 <number_set+0x9c>)
 800184e:	705a      	strb	r2, [r3, #1]
	led_buffer[2]= n2/10;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	4a0e      	ldr	r2, [pc, #56]	; (800188c <number_set+0x98>)
 8001854:	fb82 1203 	smull	r1, r2, r2, r3
 8001858:	1092      	asrs	r2, r2, #2
 800185a:	17db      	asrs	r3, r3, #31
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	b2da      	uxtb	r2, r3
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <number_set+0x9c>)
 8001862:	709a      	strb	r2, [r3, #2]
	led_buffer[3]= n2%10;
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <number_set+0x98>)
 8001868:	fb83 1302 	smull	r1, r3, r3, r2
 800186c:	1099      	asrs	r1, r3, #2
 800186e:	17d3      	asrs	r3, r2, #31
 8001870:	1ac9      	subs	r1, r1, r3
 8001872:	460b      	mov	r3, r1
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	440b      	add	r3, r1
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	1ad1      	subs	r1, r2, r3
 800187c:	b2ca      	uxtb	r2, r1
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <number_set+0x9c>)
 8001880:	70da      	strb	r2, [r3, #3]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	66666667 	.word	0x66666667
 8001890:	20000030 	.word	0x20000030

08001894 <initial_led>:
void initial_led(void){
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	initial7LED();
 8001898:	f7ff fe88 	bl	80015ac <initial7LED>
	initial_traffic_light();
 800189c:	f7ff fea8 	bl	80015f0 <initial_traffic_light>
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_MspInit+0x5c>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	4a14      	ldr	r2, [pc, #80]	; (8001900 <HAL_MspInit+0x5c>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6193      	str	r3, [r2, #24]
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_MspInit+0x5c>)
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_MspInit+0x5c>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4a0e      	ldr	r2, [pc, #56]	; (8001900 <HAL_MspInit+0x5c>)
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018cc:	61d3      	str	r3, [r2, #28]
 80018ce:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <HAL_MspInit+0x5c>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_MspInit+0x60>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_MspInit+0x60>)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	40021000 	.word	0x40021000
 8001904:	40010000 	.word	0x40010000

08001908 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001918:	d113      	bne.n	8001942 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_TIM_Base_MspInit+0x44>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	4a0b      	ldr	r2, [pc, #44]	; (800194c <HAL_TIM_Base_MspInit+0x44>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	61d3      	str	r3, [r2, #28]
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_TIM_Base_MspInit+0x44>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	201c      	movs	r0, #28
 8001938:	f000 fa0f 	bl	8001d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800193c:	201c      	movs	r0, #28
 800193e:	f000 fa28 	bl	8001d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000

08001950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <NMI_Handler+0x4>

08001956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <HardFault_Handler+0x4>

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <MemManage_Handler+0x4>

08001962 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <BusFault_Handler+0x4>

08001968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <UsageFault_Handler+0x4>

0800196e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr

0800197a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr

08001986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001996:	f000 f8ed 	bl	8001b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <TIM2_IRQHandler+0x10>)
 80019a6:	f001 f831 	bl	8002a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200000d0 	.word	0x200000d0

080019b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <set_timer>:
struct 	{
	int state;
	int count;
} timer[NUMBER_OF_TIMERS];

void set_timer(int i, int count){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
	timer[i].count= count * FREQUENCY_OF_TIM / 1000.0;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019d0:	fb02 f303 	mul.w	r3, r2, r3
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fd0b 	bl	80003f0 <__aeabi_i2d>
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <set_timer+0x50>)
 80019e0:	f7fe fe9a 	bl	8000718 <__aeabi_ddiv>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f7fe ff7c 	bl	80008e8 <__aeabi_d2iz>
 80019f0:	4602      	mov	r2, r0
 80019f2:	4908      	ldr	r1, [pc, #32]	; (8001a14 <set_timer+0x54>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	440b      	add	r3, r1
 80019fa:	605a      	str	r2, [r3, #4]
	timer[i].state= 0;
 80019fc:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <set_timer+0x54>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2100      	movs	r1, #0
 8001a02:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	408f4000 	.word	0x408f4000
 8001a14:	2000012c 	.word	0x2000012c

08001a18 <run_timer>:
void run_timer(){
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
	for(int i=0; i< NUMBER_OF_TIMERS;i++){
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	e01f      	b.n	8001a64 <run_timer+0x4c>
		if(!timer[i].state){
 8001a24:	4a14      	ldr	r2, [pc, #80]	; (8001a78 <run_timer+0x60>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d116      	bne.n	8001a5e <run_timer+0x46>
			timer[i].count--;
 8001a30:	4a11      	ldr	r2, [pc, #68]	; (8001a78 <run_timer+0x60>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4413      	add	r3, r2
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	1e5a      	subs	r2, r3, #1
 8001a3c:	490e      	ldr	r1, [pc, #56]	; (8001a78 <run_timer+0x60>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	440b      	add	r3, r1
 8001a44:	605a      	str	r2, [r3, #4]
			if(timer[i].count <= 0){
 8001a46:	4a0c      	ldr	r2, [pc, #48]	; (8001a78 <run_timer+0x60>)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	dc04      	bgt.n	8001a5e <run_timer+0x46>
				timer[i].state= 1;
 8001a54:	4a08      	ldr	r2, [pc, #32]	; (8001a78 <run_timer+0x60>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2101      	movs	r1, #1
 8001a5a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for(int i=0; i< NUMBER_OF_TIMERS;i++){
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3301      	adds	r3, #1
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	dddc      	ble.n	8001a24 <run_timer+0xc>
			}
		}
	}
}
 8001a6a:	bf00      	nop
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	2000012c 	.word	0x2000012c

08001a7c <is_timer_on>:
int is_timer_on(int i){
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	return timer[i].state;
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <is_timer_on+0x1c>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	2000012c 	.word	0x2000012c

08001a9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a9c:	f7ff ff8a 	bl	80019b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa0:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001aa2:	490c      	ldr	r1, [pc, #48]	; (8001ad4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001aa4:	4a0c      	ldr	r2, [pc, #48]	; (8001ad8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa8:	e002      	b.n	8001ab0 <LoopCopyDataInit>

08001aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aae:	3304      	adds	r3, #4

08001ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab4:	d3f9      	bcc.n	8001aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab6:	4a09      	ldr	r2, [pc, #36]	; (8001adc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ab8:	4c09      	ldr	r4, [pc, #36]	; (8001ae0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001abc:	e001      	b.n	8001ac2 <LoopFillZerobss>

08001abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac0:	3204      	adds	r2, #4

08001ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac4:	d3fb      	bcc.n	8001abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f001 faed 	bl	80030a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aca:	f7ff fb3d 	bl	8001148 <main>
  bx lr
 8001ace:	4770      	bx	lr
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001ad8:	08003140 	.word	0x08003140
  ldr r2, =_sbss
 8001adc:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001ae0:	20000158 	.word	0x20000158

08001ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC1_2_IRQHandler>
	...

08001ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_Init+0x28>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_Init+0x28>)
 8001af2:	f043 0310 	orr.w	r3, r3, #16
 8001af6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f000 f923 	bl	8001d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afe:	200f      	movs	r0, #15
 8001b00:	f000 f808 	bl	8001b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b04:	f7ff fece 	bl	80018a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40022000 	.word	0x40022000

08001b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_InitTick+0x54>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_InitTick+0x58>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4619      	mov	r1, r3
 8001b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f93b 	bl	8001dae <HAL_SYSTICK_Config>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00e      	b.n	8001b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b0f      	cmp	r3, #15
 8001b46:	d80a      	bhi.n	8001b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f000 f903 	bl	8001d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b54:	4a06      	ldr	r2, [pc, #24]	; (8001b70 <HAL_InitTick+0x5c>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e000      	b.n	8001b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000034 	.word	0x20000034
 8001b6c:	2000003c 	.word	0x2000003c
 8001b70:	20000038 	.word	0x20000038

08001b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_IncTick+0x1c>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_IncTick+0x20>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4413      	add	r3, r2
 8001b84:	4a03      	ldr	r2, [pc, #12]	; (8001b94 <HAL_IncTick+0x20>)
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	2000003c 	.word	0x2000003c
 8001b94:	20000154 	.word	0x20000154

08001b98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b02      	ldr	r3, [pc, #8]	; (8001ba8 <HAL_GetTick+0x10>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	20000154 	.word	0x20000154

08001bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bde:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	60d3      	str	r3, [r2, #12]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <__NVIC_GetPriorityGrouping+0x18>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 0307 	and.w	r3, r3, #7
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	db0b      	blt.n	8001c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4906      	ldr	r1, [pc, #24]	; (8001c44 <__NVIC_EnableIRQ+0x34>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	2001      	movs	r0, #1
 8001c32:	fa00 f202 	lsl.w	r2, r0, r2
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db0a      	blt.n	8001c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	490c      	ldr	r1, [pc, #48]	; (8001c94 <__NVIC_SetPriority+0x4c>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c70:	e00a      	b.n	8001c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4908      	ldr	r1, [pc, #32]	; (8001c98 <__NVIC_SetPriority+0x50>)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	440b      	add	r3, r1
 8001c86:	761a      	strb	r2, [r3, #24]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000e100 	.word	0xe000e100
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f1c3 0307 	rsb	r3, r3, #7
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	bf28      	it	cs
 8001cba:	2304      	movcs	r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d902      	bls.n	8001ccc <NVIC_EncodePriority+0x30>
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3b03      	subs	r3, #3
 8001cca:	e000      	b.n	8001cce <NVIC_EncodePriority+0x32>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	401a      	ands	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	4313      	orrs	r3, r2
         );
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d10:	d301      	bcc.n	8001d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00f      	b.n	8001d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d16:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <SysTick_Config+0x40>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1e:	210f      	movs	r1, #15
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f7ff ff90 	bl	8001c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <SysTick_Config+0x40>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2e:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <SysTick_Config+0x40>)
 8001d30:	2207      	movs	r2, #7
 8001d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	e000e010 	.word	0xe000e010

08001d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ff2d 	bl	8001bac <__NVIC_SetPriorityGrouping>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6c:	f7ff ff42 	bl	8001bf4 <__NVIC_GetPriorityGrouping>
 8001d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	6978      	ldr	r0, [r7, #20]
 8001d78:	f7ff ff90 	bl	8001c9c <NVIC_EncodePriority>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff5f 	bl	8001c48 <__NVIC_SetPriority>
}
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff35 	bl	8001c10 <__NVIC_EnableIRQ>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ffa2 	bl	8001d00 <SysTick_Config>
 8001dbc:	4603      	mov	r3, r0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b08b      	sub	sp, #44	; 0x2c
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dda:	e148      	b.n	800206e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	f040 8137 	bne.w	8002068 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	4aa3      	ldr	r2, [pc, #652]	; (800208c <HAL_GPIO_Init+0x2c4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d05e      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
 8001e04:	4aa1      	ldr	r2, [pc, #644]	; (800208c <HAL_GPIO_Init+0x2c4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d875      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e0a:	4aa1      	ldr	r2, [pc, #644]	; (8002090 <HAL_GPIO_Init+0x2c8>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d058      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
 8001e10:	4a9f      	ldr	r2, [pc, #636]	; (8002090 <HAL_GPIO_Init+0x2c8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d86f      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e16:	4a9f      	ldr	r2, [pc, #636]	; (8002094 <HAL_GPIO_Init+0x2cc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d052      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
 8001e1c:	4a9d      	ldr	r2, [pc, #628]	; (8002094 <HAL_GPIO_Init+0x2cc>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d869      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e22:	4a9d      	ldr	r2, [pc, #628]	; (8002098 <HAL_GPIO_Init+0x2d0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d04c      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
 8001e28:	4a9b      	ldr	r2, [pc, #620]	; (8002098 <HAL_GPIO_Init+0x2d0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d863      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e2e:	4a9b      	ldr	r2, [pc, #620]	; (800209c <HAL_GPIO_Init+0x2d4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d046      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
 8001e34:	4a99      	ldr	r2, [pc, #612]	; (800209c <HAL_GPIO_Init+0x2d4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d85d      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e3a:	2b12      	cmp	r3, #18
 8001e3c:	d82a      	bhi.n	8001e94 <HAL_GPIO_Init+0xcc>
 8001e3e:	2b12      	cmp	r3, #18
 8001e40:	d859      	bhi.n	8001ef6 <HAL_GPIO_Init+0x12e>
 8001e42:	a201      	add	r2, pc, #4	; (adr r2, 8001e48 <HAL_GPIO_Init+0x80>)
 8001e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e48:	08001ec3 	.word	0x08001ec3
 8001e4c:	08001e9d 	.word	0x08001e9d
 8001e50:	08001eaf 	.word	0x08001eaf
 8001e54:	08001ef1 	.word	0x08001ef1
 8001e58:	08001ef7 	.word	0x08001ef7
 8001e5c:	08001ef7 	.word	0x08001ef7
 8001e60:	08001ef7 	.word	0x08001ef7
 8001e64:	08001ef7 	.word	0x08001ef7
 8001e68:	08001ef7 	.word	0x08001ef7
 8001e6c:	08001ef7 	.word	0x08001ef7
 8001e70:	08001ef7 	.word	0x08001ef7
 8001e74:	08001ef7 	.word	0x08001ef7
 8001e78:	08001ef7 	.word	0x08001ef7
 8001e7c:	08001ef7 	.word	0x08001ef7
 8001e80:	08001ef7 	.word	0x08001ef7
 8001e84:	08001ef7 	.word	0x08001ef7
 8001e88:	08001ef7 	.word	0x08001ef7
 8001e8c:	08001ea5 	.word	0x08001ea5
 8001e90:	08001eb9 	.word	0x08001eb9
 8001e94:	4a82      	ldr	r2, [pc, #520]	; (80020a0 <HAL_GPIO_Init+0x2d8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d013      	beq.n	8001ec2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e9a:	e02c      	b.n	8001ef6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	623b      	str	r3, [r7, #32]
          break;
 8001ea2:	e029      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	623b      	str	r3, [r7, #32]
          break;
 8001eac:	e024      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	3308      	adds	r3, #8
 8001eb4:	623b      	str	r3, [r7, #32]
          break;
 8001eb6:	e01f      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	330c      	adds	r3, #12
 8001ebe:	623b      	str	r3, [r7, #32]
          break;
 8001ec0:	e01a      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d102      	bne.n	8001ed0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eca:	2304      	movs	r3, #4
 8001ecc:	623b      	str	r3, [r7, #32]
          break;
 8001ece:	e013      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d105      	bne.n	8001ee4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	611a      	str	r2, [r3, #16]
          break;
 8001ee2:	e009      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	615a      	str	r2, [r3, #20]
          break;
 8001eee:	e003      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	623b      	str	r3, [r7, #32]
          break;
 8001ef4:	e000      	b.n	8001ef8 <HAL_GPIO_Init+0x130>
          break;
 8001ef6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	2bff      	cmp	r3, #255	; 0xff
 8001efc:	d801      	bhi.n	8001f02 <HAL_GPIO_Init+0x13a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	e001      	b.n	8001f06 <HAL_GPIO_Init+0x13e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3304      	adds	r3, #4
 8001f06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2bff      	cmp	r3, #255	; 0xff
 8001f0c:	d802      	bhi.n	8001f14 <HAL_GPIO_Init+0x14c>
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	e002      	b.n	8001f1a <HAL_GPIO_Init+0x152>
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	3b08      	subs	r3, #8
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	210f      	movs	r1, #15
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	6a39      	ldr	r1, [r7, #32]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	fa01 f303 	lsl.w	r3, r1, r3
 8001f34:	431a      	orrs	r2, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8090 	beq.w	8002068 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f48:	4b56      	ldr	r3, [pc, #344]	; (80020a4 <HAL_GPIO_Init+0x2dc>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	4a55      	ldr	r2, [pc, #340]	; (80020a4 <HAL_GPIO_Init+0x2dc>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6193      	str	r3, [r2, #24]
 8001f54:	4b53      	ldr	r3, [pc, #332]	; (80020a4 <HAL_GPIO_Init+0x2dc>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f60:	4a51      	ldr	r2, [pc, #324]	; (80020a8 <HAL_GPIO_Init+0x2e0>)
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	3302      	adds	r3, #2
 8001f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	220f      	movs	r2, #15
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4013      	ands	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a49      	ldr	r2, [pc, #292]	; (80020ac <HAL_GPIO_Init+0x2e4>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d00d      	beq.n	8001fa8 <HAL_GPIO_Init+0x1e0>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a48      	ldr	r2, [pc, #288]	; (80020b0 <HAL_GPIO_Init+0x2e8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d007      	beq.n	8001fa4 <HAL_GPIO_Init+0x1dc>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a47      	ldr	r2, [pc, #284]	; (80020b4 <HAL_GPIO_Init+0x2ec>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d101      	bne.n	8001fa0 <HAL_GPIO_Init+0x1d8>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e004      	b.n	8001faa <HAL_GPIO_Init+0x1e2>
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e002      	b.n	8001faa <HAL_GPIO_Init+0x1e2>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_GPIO_Init+0x1e2>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fac:	f002 0203 	and.w	r2, r2, #3
 8001fb0:	0092      	lsls	r2, r2, #2
 8001fb2:	4093      	lsls	r3, r2
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fba:	493b      	ldr	r1, [pc, #236]	; (80020a8 <HAL_GPIO_Init+0x2e0>)
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	089b      	lsrs	r3, r3, #2
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d006      	beq.n	8001fe2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fd4:	4b38      	ldr	r3, [pc, #224]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	4937      	ldr	r1, [pc, #220]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	608b      	str	r3, [r1, #8]
 8001fe0:	e006      	b.n	8001ff0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fe2:	4b35      	ldr	r3, [pc, #212]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	4933      	ldr	r1, [pc, #204]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ffc:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	492d      	ldr	r1, [pc, #180]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	60cb      	str	r3, [r1, #12]
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800200a:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	43db      	mvns	r3, r3
 8002012:	4929      	ldr	r1, [pc, #164]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8002014:	4013      	ands	r3, r2
 8002016:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d006      	beq.n	8002032 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002024:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	4923      	ldr	r1, [pc, #140]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002032:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	43db      	mvns	r3, r3
 800203a:	491f      	ldr	r1, [pc, #124]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 800203c:	4013      	ands	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800204c:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4919      	ldr	r1, [pc, #100]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	43db      	mvns	r3, r3
 8002062:	4915      	ldr	r1, [pc, #84]	; (80020b8 <HAL_GPIO_Init+0x2f0>)
 8002064:	4013      	ands	r3, r2
 8002066:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	3301      	adds	r3, #1
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	f47f aeaf 	bne.w	8001ddc <HAL_GPIO_Init+0x14>
  }
}
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	372c      	adds	r7, #44	; 0x2c
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	10320000 	.word	0x10320000
 8002090:	10310000 	.word	0x10310000
 8002094:	10220000 	.word	0x10220000
 8002098:	10210000 	.word	0x10210000
 800209c:	10120000 	.word	0x10120000
 80020a0:	10110000 	.word	0x10110000
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40010800 	.word	0x40010800
 80020b0:	40010c00 	.word	0x40010c00
 80020b4:	40011000 	.word	0x40011000
 80020b8:	40010400 	.word	0x40010400

080020bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	887b      	ldrh	r3, [r7, #2]
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	e001      	b.n	80020de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020de:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	807b      	strh	r3, [r7, #2]
 80020f6:	4613      	mov	r3, r2
 80020f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020fa:	787b      	ldrb	r3, [r7, #1]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002100:	887a      	ldrh	r2, [r7, #2]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002106:	e003      	b.n	8002110 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002108:	887b      	ldrh	r3, [r7, #2]
 800210a:	041a      	lsls	r2, r3, #16
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	611a      	str	r2, [r3, #16]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
	...

0800211c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e26c      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8087 	beq.w	800224a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800213c:	4b92      	ldr	r3, [pc, #584]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 030c 	and.w	r3, r3, #12
 8002144:	2b04      	cmp	r3, #4
 8002146:	d00c      	beq.n	8002162 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002148:	4b8f      	ldr	r3, [pc, #572]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 030c 	and.w	r3, r3, #12
 8002150:	2b08      	cmp	r3, #8
 8002152:	d112      	bne.n	800217a <HAL_RCC_OscConfig+0x5e>
 8002154:	4b8c      	ldr	r3, [pc, #560]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002160:	d10b      	bne.n	800217a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002162:	4b89      	ldr	r3, [pc, #548]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d06c      	beq.n	8002248 <HAL_RCC_OscConfig+0x12c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d168      	bne.n	8002248 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e246      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x76>
 8002184:	4b80      	ldr	r3, [pc, #512]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a7f      	ldr	r2, [pc, #508]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800218a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	e02e      	b.n	80021f0 <HAL_RCC_OscConfig+0xd4>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x98>
 800219a:	4b7b      	ldr	r3, [pc, #492]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a7a      	ldr	r2, [pc, #488]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b78      	ldr	r3, [pc, #480]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a77      	ldr	r2, [pc, #476]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e01d      	b.n	80021f0 <HAL_RCC_OscConfig+0xd4>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0xbc>
 80021be:	4b72      	ldr	r3, [pc, #456]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a71      	ldr	r2, [pc, #452]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b6f      	ldr	r3, [pc, #444]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a6e      	ldr	r2, [pc, #440]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e00b      	b.n	80021f0 <HAL_RCC_OscConfig+0xd4>
 80021d8:	4b6b      	ldr	r3, [pc, #428]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a6a      	ldr	r2, [pc, #424]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	4b68      	ldr	r3, [pc, #416]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a67      	ldr	r2, [pc, #412]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d013      	beq.n	8002220 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7ff fcce 	bl	8001b98 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002200:	f7ff fcca 	bl	8001b98 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e1fa      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b5d      	ldr	r3, [pc, #372]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0xe4>
 800221e:	e014      	b.n	800224a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7ff fcba 	bl	8001b98 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002228:	f7ff fcb6 	bl	8001b98 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e1e6      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223a:	4b53      	ldr	r3, [pc, #332]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x10c>
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d063      	beq.n	800231e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002256:	4b4c      	ldr	r3, [pc, #304]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00b      	beq.n	800227a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002262:	4b49      	ldr	r3, [pc, #292]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b08      	cmp	r3, #8
 800226c:	d11c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x18c>
 800226e:	4b46      	ldr	r3, [pc, #280]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d116      	bne.n	80022a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227a:	4b43      	ldr	r3, [pc, #268]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_RCC_OscConfig+0x176>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d001      	beq.n	8002292 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e1ba      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002292:	4b3d      	ldr	r3, [pc, #244]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4939      	ldr	r1, [pc, #228]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a6:	e03a      	b.n	800231e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d020      	beq.n	80022f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b0:	4b36      	ldr	r3, [pc, #216]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7ff fc6f 	bl	8001b98 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022be:	f7ff fc6b 	bl	8001b98 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e19b      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d0:	4b2d      	ldr	r3, [pc, #180]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022dc:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4927      	ldr	r1, [pc, #156]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]
 80022f0:	e015      	b.n	800231e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <HAL_RCC_OscConfig+0x270>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7ff fc4e 	bl	8001b98 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002300:	f7ff fc4a 	bl	8001b98 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e17a      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002312:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d03a      	beq.n	80023a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d019      	beq.n	8002366 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002332:	4b17      	ldr	r3, [pc, #92]	; (8002390 <HAL_RCC_OscConfig+0x274>)
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002338:	f7ff fc2e 	bl	8001b98 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002340:	f7ff fc2a 	bl	8001b98 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e15a      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <HAL_RCC_OscConfig+0x26c>)
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800235e:	2001      	movs	r0, #1
 8002360:	f000 fa9a 	bl	8002898 <RCC_Delay>
 8002364:	e01c      	b.n	80023a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_RCC_OscConfig+0x274>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236c:	f7ff fc14 	bl	8001b98 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002372:	e00f      	b.n	8002394 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002374:	f7ff fc10 	bl	8001b98 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d908      	bls.n	8002394 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e140      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000
 800238c:	42420000 	.word	0x42420000
 8002390:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002394:	4b9e      	ldr	r3, [pc, #632]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1e9      	bne.n	8002374 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80a6 	beq.w	80024fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ae:	2300      	movs	r3, #0
 80023b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023b2:	4b97      	ldr	r3, [pc, #604]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10d      	bne.n	80023da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	4b94      	ldr	r3, [pc, #592]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	4a93      	ldr	r2, [pc, #588]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c8:	61d3      	str	r3, [r2, #28]
 80023ca:	4b91      	ldr	r3, [pc, #580]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d6:	2301      	movs	r3, #1
 80023d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023da:	4b8e      	ldr	r3, [pc, #568]	; (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d118      	bne.n	8002418 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023e6:	4b8b      	ldr	r3, [pc, #556]	; (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a8a      	ldr	r2, [pc, #552]	; (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f2:	f7ff fbd1 	bl	8001b98 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fa:	f7ff fbcd 	bl	8001b98 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b64      	cmp	r3, #100	; 0x64
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e0fd      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240c:	4b81      	ldr	r3, [pc, #516]	; (8002614 <HAL_RCC_OscConfig+0x4f8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x312>
 8002420:	4b7b      	ldr	r3, [pc, #492]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	4a7a      	ldr	r2, [pc, #488]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6213      	str	r3, [r2, #32]
 800242c:	e02d      	b.n	800248a <HAL_RCC_OscConfig+0x36e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0x334>
 8002436:	4b76      	ldr	r3, [pc, #472]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	4a75      	ldr	r2, [pc, #468]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	6213      	str	r3, [r2, #32]
 8002442:	4b73      	ldr	r3, [pc, #460]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a72      	ldr	r2, [pc, #456]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002448:	f023 0304 	bic.w	r3, r3, #4
 800244c:	6213      	str	r3, [r2, #32]
 800244e:	e01c      	b.n	800248a <HAL_RCC_OscConfig+0x36e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b05      	cmp	r3, #5
 8002456:	d10c      	bne.n	8002472 <HAL_RCC_OscConfig+0x356>
 8002458:	4b6d      	ldr	r3, [pc, #436]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	4a6c      	ldr	r2, [pc, #432]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800245e:	f043 0304 	orr.w	r3, r3, #4
 8002462:	6213      	str	r3, [r2, #32]
 8002464:	4b6a      	ldr	r3, [pc, #424]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4a69      	ldr	r2, [pc, #420]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6213      	str	r3, [r2, #32]
 8002470:	e00b      	b.n	800248a <HAL_RCC_OscConfig+0x36e>
 8002472:	4b67      	ldr	r3, [pc, #412]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	4a66      	ldr	r2, [pc, #408]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	6213      	str	r3, [r2, #32]
 800247e:	4b64      	ldr	r3, [pc, #400]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4a63      	ldr	r2, [pc, #396]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	f023 0304 	bic.w	r3, r3, #4
 8002488:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d015      	beq.n	80024be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002492:	f7ff fb81 	bl	8001b98 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7ff fb7d 	bl	8001b98 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0ab      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b0:	4b57      	ldr	r3, [pc, #348]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ee      	beq.n	800249a <HAL_RCC_OscConfig+0x37e>
 80024bc:	e014      	b.n	80024e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024be:	f7ff fb6b 	bl	8001b98 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7ff fb67 	bl	8001b98 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e095      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024dc:	4b4c      	ldr	r3, [pc, #304]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ee      	bne.n	80024c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d105      	bne.n	80024fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ee:	4b48      	ldr	r3, [pc, #288]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	4a47      	ldr	r2, [pc, #284]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 8081 	beq.w	8002606 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002504:	4b42      	ldr	r3, [pc, #264]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	2b08      	cmp	r3, #8
 800250e:	d061      	beq.n	80025d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d146      	bne.n	80025a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002518:	4b3f      	ldr	r3, [pc, #252]	; (8002618 <HAL_RCC_OscConfig+0x4fc>)
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251e:	f7ff fb3b 	bl	8001b98 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002526:	f7ff fb37 	bl	8001b98 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e067      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002538:	4b35      	ldr	r3, [pc, #212]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1f0      	bne.n	8002526 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254c:	d108      	bne.n	8002560 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800254e:	4b30      	ldr	r3, [pc, #192]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	492d      	ldr	r1, [pc, #180]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002560:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a19      	ldr	r1, [r3, #32]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	430b      	orrs	r3, r1
 8002572:	4927      	ldr	r1, [pc, #156]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_RCC_OscConfig+0x4fc>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7ff fb0b 	bl	8001b98 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002586:	f7ff fb07 	bl	8001b98 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e037      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x46a>
 80025a4:	e02f      	b.n	8002606 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a6:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <HAL_RCC_OscConfig+0x4fc>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7ff faf4 	bl	8001b98 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b4:	f7ff faf0 	bl	8001b98 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e020      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x498>
 80025d2:	e018      	b.n	8002606 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e013      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d106      	bne.n	8002602 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000
 8002614:	40007000 	.word	0x40007000
 8002618:	42420060 	.word	0x42420060

0800261c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0d0      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002630:	4b6a      	ldr	r3, [pc, #424]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d910      	bls.n	8002660 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b67      	ldr	r3, [pc, #412]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 0207 	bic.w	r2, r3, #7
 8002646:	4965      	ldr	r1, [pc, #404]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b63      	ldr	r3, [pc, #396]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0b8      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d020      	beq.n	80026ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002678:	4b59      	ldr	r3, [pc, #356]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a58      	ldr	r2, [pc, #352]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002682:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002690:	4b53      	ldr	r3, [pc, #332]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a52      	ldr	r2, [pc, #328]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800269a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800269c:	4b50      	ldr	r3, [pc, #320]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	494d      	ldr	r1, [pc, #308]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d040      	beq.n	800273c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	4b47      	ldr	r3, [pc, #284]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d115      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e07f      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026da:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e073      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ea:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e06b      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fa:	4b39      	ldr	r3, [pc, #228]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f023 0203 	bic.w	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4936      	ldr	r1, [pc, #216]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800270c:	f7ff fa44 	bl	8001b98 <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	e00a      	b.n	800272a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002714:	f7ff fa40 	bl	8001b98 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e053      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	4b2d      	ldr	r3, [pc, #180]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 020c 	and.w	r2, r3, #12
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	429a      	cmp	r2, r3
 800273a:	d1eb      	bne.n	8002714 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800273c:	4b27      	ldr	r3, [pc, #156]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d210      	bcs.n	800276c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b24      	ldr	r3, [pc, #144]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 0207 	bic.w	r2, r3, #7
 8002752:	4922      	ldr	r1, [pc, #136]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	4b20      	ldr	r3, [pc, #128]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e032      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4916      	ldr	r1, [pc, #88]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d009      	beq.n	80027aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	490e      	ldr	r1, [pc, #56]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027aa:	f000 f821 	bl	80027f0 <HAL_RCC_GetSysClockFreq>
 80027ae:	4602      	mov	r2, r0
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	490a      	ldr	r1, [pc, #40]	; (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027bc:	5ccb      	ldrb	r3, [r1, r3]
 80027be:	fa22 f303 	lsr.w	r3, r2, r3
 80027c2:	4a09      	ldr	r2, [pc, #36]	; (80027e8 <HAL_RCC_ClockConfig+0x1cc>)
 80027c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_RCC_ClockConfig+0x1d0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff f9a2 	bl	8001b14 <HAL_InitTick>

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40022000 	.word	0x40022000
 80027e0:	40021000 	.word	0x40021000
 80027e4:	08003114 	.word	0x08003114
 80027e8:	20000034 	.word	0x20000034
 80027ec:	20000038 	.word	0x20000038

080027f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800280a:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <HAL_RCC_GetSysClockFreq+0x94>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b04      	cmp	r3, #4
 8002818:	d002      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x30>
 800281a:	2b08      	cmp	r3, #8
 800281c:	d003      	beq.n	8002826 <HAL_RCC_GetSysClockFreq+0x36>
 800281e:	e027      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002820:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_RCC_GetSysClockFreq+0x98>)
 8002822:	613b      	str	r3, [r7, #16]
      break;
 8002824:	e027      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	0c9b      	lsrs	r3, r3, #18
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	4a17      	ldr	r2, [pc, #92]	; (800288c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002830:	5cd3      	ldrb	r3, [r2, r3]
 8002832:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d010      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800283e:	4b11      	ldr	r3, [pc, #68]	; (8002884 <HAL_RCC_GetSysClockFreq+0x94>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	0c5b      	lsrs	r3, r3, #17
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	4a11      	ldr	r2, [pc, #68]	; (8002890 <HAL_RCC_GetSysClockFreq+0xa0>)
 800284a:	5cd3      	ldrb	r3, [r2, r3]
 800284c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a0d      	ldr	r2, [pc, #52]	; (8002888 <HAL_RCC_GetSysClockFreq+0x98>)
 8002852:	fb02 f203 	mul.w	r2, r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e004      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002864:	fb02 f303 	mul.w	r3, r2, r3
 8002868:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	613b      	str	r3, [r7, #16]
      break;
 800286e:	e002      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCC_GetSysClockFreq+0x98>)
 8002872:	613b      	str	r3, [r7, #16]
      break;
 8002874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002876:	693b      	ldr	r3, [r7, #16]
}
 8002878:	4618      	mov	r0, r3
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	007a1200 	.word	0x007a1200
 800288c:	08003124 	.word	0x08003124
 8002890:	08003134 	.word	0x08003134
 8002894:	003d0900 	.word	0x003d0900

08002898 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028a0:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <RCC_Delay+0x34>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <RCC_Delay+0x38>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	0a5b      	lsrs	r3, r3, #9
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	fb02 f303 	mul.w	r3, r2, r3
 80028b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028b4:	bf00      	nop
  }
  while (Delay --);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1e5a      	subs	r2, r3, #1
 80028ba:	60fa      	str	r2, [r7, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f9      	bne.n	80028b4 <RCC_Delay+0x1c>
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	20000034 	.word	0x20000034
 80028d0:	10624dd3 	.word	0x10624dd3

080028d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e041      	b.n	800296a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff f804 	bl	8001908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3304      	adds	r3, #4
 8002910:	4619      	mov	r1, r3
 8002912:	4610      	mov	r0, r2
 8002914:	f000 fa6e 	bl	8002df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d001      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e035      	b.n	80029f8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a16      	ldr	r2, [pc, #88]	; (8002a04 <HAL_TIM_Base_Start_IT+0x90>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d009      	beq.n	80029c2 <HAL_TIM_Base_Start_IT+0x4e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b6:	d004      	beq.n	80029c2 <HAL_TIM_Base_Start_IT+0x4e>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <HAL_TIM_Base_Start_IT+0x94>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d111      	bne.n	80029e6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b06      	cmp	r3, #6
 80029d2:	d010      	beq.n	80029f6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e4:	e007      	b.n	80029f6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0201 	orr.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40012c00 	.word	0x40012c00
 8002a08:	40000400 	.word	0x40000400

08002a0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d122      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d11b      	bne.n	8002a68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0202 	mvn.w	r2, #2
 8002a38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f9b4 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002a54:	e005      	b.n	8002a62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f9a7 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f9b6 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d122      	bne.n	8002abc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d11b      	bne.n	8002abc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0204 	mvn.w	r2, #4
 8002a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2202      	movs	r2, #2
 8002a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f98a 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002aa8:	e005      	b.n	8002ab6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f97d 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f98c 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d122      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d11b      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0208 	mvn.w	r2, #8
 8002ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f960 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002afc:	e005      	b.n	8002b0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f953 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f962 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	2b10      	cmp	r3, #16
 8002b1c:	d122      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0310 	and.w	r3, r3, #16
 8002b28:	2b10      	cmp	r3, #16
 8002b2a:	d11b      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0210 	mvn.w	r2, #16
 8002b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2208      	movs	r2, #8
 8002b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f936 	bl	8002dbc <HAL_TIM_IC_CaptureCallback>
 8002b50:	e005      	b.n	8002b5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f929 	bl	8002daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f938 	bl	8002dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d10e      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d107      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0201 	mvn.w	r2, #1
 8002b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fe fbfc 	bl	8001388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9a:	2b80      	cmp	r3, #128	; 0x80
 8002b9c:	d10e      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba8:	2b80      	cmp	r3, #128	; 0x80
 8002baa:	d107      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fa6b 	bl	8003092 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc6:	2b40      	cmp	r3, #64	; 0x40
 8002bc8:	d10e      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd4:	2b40      	cmp	r3, #64	; 0x40
 8002bd6:	d107      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f8fc 	bl	8002de0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	d10e      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b20      	cmp	r3, #32
 8002c02:	d107      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0220 	mvn.w	r2, #32
 8002c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fa36 	bl	8003080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_TIM_ConfigClockSource+0x1c>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e0b4      	b.n	8002da2 <HAL_TIM_ConfigClockSource+0x186>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c70:	d03e      	beq.n	8002cf0 <HAL_TIM_ConfigClockSource+0xd4>
 8002c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c76:	f200 8087 	bhi.w	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7e:	f000 8086 	beq.w	8002d8e <HAL_TIM_ConfigClockSource+0x172>
 8002c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c86:	d87f      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002c88:	2b70      	cmp	r3, #112	; 0x70
 8002c8a:	d01a      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0xa6>
 8002c8c:	2b70      	cmp	r3, #112	; 0x70
 8002c8e:	d87b      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002c90:	2b60      	cmp	r3, #96	; 0x60
 8002c92:	d050      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x11a>
 8002c94:	2b60      	cmp	r3, #96	; 0x60
 8002c96:	d877      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002c98:	2b50      	cmp	r3, #80	; 0x50
 8002c9a:	d03c      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0xfa>
 8002c9c:	2b50      	cmp	r3, #80	; 0x50
 8002c9e:	d873      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d058      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0x13a>
 8002ca4:	2b40      	cmp	r3, #64	; 0x40
 8002ca6:	d86f      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca8:	2b30      	cmp	r3, #48	; 0x30
 8002caa:	d064      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15a>
 8002cac:	2b30      	cmp	r3, #48	; 0x30
 8002cae:	d86b      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	d060      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15a>
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d867      	bhi.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d05c      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15a>
 8002cbc:	2b10      	cmp	r3, #16
 8002cbe:	d05a      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x15a>
 8002cc0:	e062      	b.n	8002d88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6899      	ldr	r1, [r3, #8]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f000 f95e 	bl	8002f92 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ce4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	609a      	str	r2, [r3, #8]
      break;
 8002cee:	e04f      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	6899      	ldr	r1, [r3, #8]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f000 f947 	bl	8002f92 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d12:	609a      	str	r2, [r3, #8]
      break;
 8002d14:	e03c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6859      	ldr	r1, [r3, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	461a      	mov	r2, r3
 8002d24:	f000 f8be 	bl	8002ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2150      	movs	r1, #80	; 0x50
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f915 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002d34:	e02c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f000 f8dc 	bl	8002f00 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2160      	movs	r1, #96	; 0x60
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f905 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002d54:	e01c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f000 f89e 	bl	8002ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2140      	movs	r1, #64	; 0x40
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 f8f5 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002d74:	e00c      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4610      	mov	r0, r2
 8002d82:	f000 f8ec 	bl	8002f5e <TIM_ITRx_SetConfig>
      break;
 8002d86:	e003      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8c:	e000      	b.n	8002d90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr

08002de0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
	...

08002df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a25      	ldr	r2, [pc, #148]	; (8002e9c <TIM_Base_SetConfig+0xa8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d007      	beq.n	8002e1c <TIM_Base_SetConfig+0x28>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e12:	d003      	beq.n	8002e1c <TIM_Base_SetConfig+0x28>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a22      	ldr	r2, [pc, #136]	; (8002ea0 <TIM_Base_SetConfig+0xac>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d108      	bne.n	8002e2e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a1a      	ldr	r2, [pc, #104]	; (8002e9c <TIM_Base_SetConfig+0xa8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d007      	beq.n	8002e46 <TIM_Base_SetConfig+0x52>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3c:	d003      	beq.n	8002e46 <TIM_Base_SetConfig+0x52>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a17      	ldr	r2, [pc, #92]	; (8002ea0 <TIM_Base_SetConfig+0xac>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d108      	bne.n	8002e58 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a07      	ldr	r2, [pc, #28]	; (8002e9c <TIM_Base_SetConfig+0xa8>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d103      	bne.n	8002e8c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	615a      	str	r2, [r3, #20]
}
 8002e92:	bf00      	nop
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr
 8002e9c:	40012c00 	.word	0x40012c00
 8002ea0:	40000400 	.word	0x40000400

08002ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	f023 0201 	bic.w	r2, r3, #1
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f023 030a 	bic.w	r3, r3, #10
 8002ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	371c      	adds	r7, #28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	f023 0210 	bic.w	r2, r3, #16
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	031b      	lsls	r3, r3, #12
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	621a      	str	r2, [r3, #32]
}
 8002f54:	bf00      	nop
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f043 0307 	orr.w	r3, r3, #7
 8002f80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	609a      	str	r2, [r3, #8]
}
 8002f88:	bf00      	nop
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b087      	sub	sp, #28
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	021a      	lsls	r2, r3, #8
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	609a      	str	r2, [r3, #8]
}
 8002fc6:	bf00      	nop
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e041      	b.n	800306c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a14      	ldr	r2, [pc, #80]	; (8003078 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d009      	beq.n	8003040 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003034:	d004      	beq.n	8003040 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a10      	ldr	r2, [pc, #64]	; (800307c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d10c      	bne.n	800305a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003046:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	4313      	orrs	r3, r2
 8003050:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40012c00 	.word	0x40012c00
 800307c:	40000400 	.word	0x40000400

08003080 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr

08003092 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <__libc_init_array>:
 80030a4:	b570      	push	{r4, r5, r6, lr}
 80030a6:	2600      	movs	r6, #0
 80030a8:	4d0c      	ldr	r5, [pc, #48]	; (80030dc <__libc_init_array+0x38>)
 80030aa:	4c0d      	ldr	r4, [pc, #52]	; (80030e0 <__libc_init_array+0x3c>)
 80030ac:	1b64      	subs	r4, r4, r5
 80030ae:	10a4      	asrs	r4, r4, #2
 80030b0:	42a6      	cmp	r6, r4
 80030b2:	d109      	bne.n	80030c8 <__libc_init_array+0x24>
 80030b4:	f000 f822 	bl	80030fc <_init>
 80030b8:	2600      	movs	r6, #0
 80030ba:	4d0a      	ldr	r5, [pc, #40]	; (80030e4 <__libc_init_array+0x40>)
 80030bc:	4c0a      	ldr	r4, [pc, #40]	; (80030e8 <__libc_init_array+0x44>)
 80030be:	1b64      	subs	r4, r4, r5
 80030c0:	10a4      	asrs	r4, r4, #2
 80030c2:	42a6      	cmp	r6, r4
 80030c4:	d105      	bne.n	80030d2 <__libc_init_array+0x2e>
 80030c6:	bd70      	pop	{r4, r5, r6, pc}
 80030c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030cc:	4798      	blx	r3
 80030ce:	3601      	adds	r6, #1
 80030d0:	e7ee      	b.n	80030b0 <__libc_init_array+0xc>
 80030d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d6:	4798      	blx	r3
 80030d8:	3601      	adds	r6, #1
 80030da:	e7f2      	b.n	80030c2 <__libc_init_array+0x1e>
 80030dc:	08003138 	.word	0x08003138
 80030e0:	08003138 	.word	0x08003138
 80030e4:	08003138 	.word	0x08003138
 80030e8:	0800313c 	.word	0x0800313c

080030ec <memset>:
 80030ec:	4603      	mov	r3, r0
 80030ee:	4402      	add	r2, r0
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d100      	bne.n	80030f6 <memset+0xa>
 80030f4:	4770      	bx	lr
 80030f6:	f803 1b01 	strb.w	r1, [r3], #1
 80030fa:	e7f9      	b.n	80030f0 <memset+0x4>

080030fc <_init>:
 80030fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fe:	bf00      	nop
 8003100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003102:	bc08      	pop	{r3}
 8003104:	469e      	mov	lr, r3
 8003106:	4770      	bx	lr

08003108 <_fini>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	bf00      	nop
 800310c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310e:	bc08      	pop	{r3}
 8003110:	469e      	mov	lr, r3
 8003112:	4770      	bx	lr
